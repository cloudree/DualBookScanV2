<?xml version="1.0"?>
<doc>
    <assembly>
        <name>sharpPDF</name>
    </assembly>
    <members>
        <member name="T:sharpPDF.Bookmarks.IPdfDestination">
            <summary>
            Interface for a pdfDestination
            </summary>
        </member>
        <member name="M:sharpPDF.Bookmarks.IPdfDestination.getDestinationValue">
            <summary>
            Method that returns the PDF codes to write the destination
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="T:sharpPDF.Bookmarks.pdfBookmarkNode">
            <summary>
            Class that represent a single bookmark element
            </summary>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfBookmarkNode.CompareTo(System.Object)">
            <summary>
            Method that allows to compare pdfBookmarkNodes (Inherited from IComparable)
            </summary>
            <param name="obj">Object to compare</param>
            <returns>Compare result</returns>
        </member>
        <member name="P:sharpPDF.Bookmarks.pdfBookmarkNode.Title">
            <summary>
            Bookmark's title
            </summary>
        </member>
        <member name="P:sharpPDF.Bookmarks.pdfBookmarkNode.Page">
            <summary>
            Page's reference for the bookmark
            </summary>
        </member>
        <member name="P:sharpPDF.Bookmarks.pdfBookmarkNode.Destination">
            <summary>
            Destination of the bookmark
            </summary>
        </member>
        <member name="P:sharpPDF.Bookmarks.pdfBookmarkNode.open">
            <summary>
            The visibility of bookmark's childs
            </summary>
        </member>
        <member name="P:sharpPDF.Bookmarks.pdfBookmarkNode.ObjectID">
            <summary>
            Bookmark's ID
            </summary>
        </member>
        <member name="P:sharpPDF.Bookmarks.pdfBookmarkNode.prev">
            <summary>
            Prev bookmark ID
            </summary>
        </member>
        <member name="P:sharpPDF.Bookmarks.pdfBookmarkNode.next">
            <summary>
            Next bookmark ID
            </summary>
        </member>
        <member name="P:sharpPDF.Bookmarks.pdfBookmarkNode.first">
            <summary>
            First child ID
            </summary>
        </member>
        <member name="P:sharpPDF.Bookmarks.pdfBookmarkNode.last">
            <summary>
            Last child ID
            </summary>
        </member>
        <member name="P:sharpPDF.Bookmarks.pdfBookmarkNode.parent">
            <summary>
            Bokkmark's partent ID
            </summary>
        </member>
        <member name="P:sharpPDF.Bookmarks.pdfBookmarkNode.childCount">
            <summary>
            Number of childs
            </summary>
        </member>
        <member name="P:sharpPDF.Bookmarks.pdfBookmarkNode.Childs">
            <summary>
            Bookmark's childs
            </summary>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfBookmarkNode.getFirstChild">
            <summary>
            Method that returns the first child
            </summary>
            <returns>Object that represent the first child</returns>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfBookmarkNode.getLastChild">
            <summary>
            Method that returns the last child
            </summary>
            <returns>Object that represent the last child</returns>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfBookmarkNode.#ctor(System.String,sharpPDF.pdfPage,System.Boolean)">
            <summary>
            Class's constructor
            </summary>
            <param name="Title">Bookmark's title</param>
            <param name="Page">Destination Page</param>
            <param name="openBookmark">The visibility of bookmark's childs</param>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfBookmarkNode.#ctor(System.String,sharpPDF.pdfPage,System.Boolean,sharpPDF.Bookmarks.IPdfDestination)">
            <summary>
            Class's constructor
            </summary>
            <param name="Title">Bookmark's title</param>
            <param name="Page">Destination Page</param>
            <param name="openBookmark">The visibility of bookmark's childs</param>
            <param name="Destination">Destination object</param>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfBookmarkNode.addChildNode(sharpPDF.Bookmarks.pdfBookmarkNode)">
            <summary>
            Method that add a child to the bookmark
            </summary>
            <param name="Child">Child object</param>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfBookmarkNode.getText">
            <summary>
            Method that returns the PDF codes to write the object in the document
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="T:sharpPDF.Bookmarks.pdfDestinationFactory">
            <summary>
            Class that represent a destination into a pdf document
            </summary>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfDestinationFactory.createPdfDestinationXYZ(System.Int32,System.Int32,System.Int32)">
            <summary>
            Method that creates a pdfDestination with XYZ type
            </summary>
            <param name="left">Left margin</param>
            <param name="top">Top margin</param>
            <param name="zoom">Page's zoom</param>
            <returns>pdfDestination object</returns>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfDestinationFactory.createPdfDestinationFit">
            <summary>
            Method that creates a pdfDestination with Fit type
            </summary>
            <returns>pdfDestination object</returns>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfDestinationFactory.createPdfDestinationFitH(System.Int32)">
            <summary>
            Method that creates a pdfDestination with FitH type
            </summary>
            <param name="top">Top margin</param>
            <returns>pdfDestination object</returns>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfDestinationFactory.createPdfDestinationFitV(System.Int32)">
            <summary>
            Method that creates a pdfDestination with FitV type
            </summary>
            <param name="left">Left margin</param>
            <returns>pdfDestination object</returns>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfDestinationFactory.createPdfDestinationFitR(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Mathod that creates a pdfDestination with FitR type
            </summary>
            <param name="left">Left margin</param>
            <param name="top">Top margin</param>
            <param name="bottom">Bottom margin</param>
            <param name="right">Right margin</param>
            <returns>pdfDestination object</returns>
        </member>
        <member name="T:sharpPDF.Bookmarks.pdfDestinationFit">
            <summary>
            Class that represents a pdfDestination of Fit type.
            </summary>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfDestinationFit.#ctor">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfDestinationFit.getDestinationValue">
            <summary>
            Method that returns the PDF codes to write the destination
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="T:sharpPDF.Bookmarks.pdfDestinationFitH">
            <summary>
            Class that represents a pdfDestination of FitH type.
            </summary>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfDestinationFitH.#ctor(System.Int32)">
            <summary>
            Class's constructor
            </summary>
            <param name="top">Top margin</param>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfDestinationFitH.getDestinationValue">
            <summary>
            Method that returns the PDF codes to write the destination
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="T:sharpPDF.Bookmarks.pdfDestinationFitR">
            <summary>
            Class that represents a pdfDestination of FitR type.
            </summary>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfDestinationFitR.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Class's constructor
            </summary>
            <param name="left">Left margin</param>
            <param name="top">Top margin</param>
            <param name="bottom">Bottom margin</param>
            <param name="right">Right margin</param>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfDestinationFitR.getDestinationValue">
            <summary>
            Method that returns the PDF codes to write the destination
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="T:sharpPDF.Bookmarks.pdfDestinationFitV">
            <summary>
            Class that represents a pdfDestination of FitV type.
            </summary>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfDestinationFitV.#ctor(System.Int32)">
            <summary>
            Class's constructor
            </summary>
            <param name="left">Left margin</param>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfDestinationFitV.getDestinationValue">
            <summary>
            Method that returns the PDF codes to write the destination
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="T:sharpPDF.Bookmarks.pdfDestinationXYZ">
            <summary>
            Class that represents a pdfDestination of XYZ type.
            </summary>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfDestinationXYZ.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Class's constructor
            </summary>
            <param name="left">Left margin</param>
            <param name="top">Top margin</param>
            <param name="zoom">Zoom</param>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfDestinationXYZ.getDestinationValue">
            <summary>
            Method that returns the PDF codes to write the destination
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="M:sharpPDF.Bookmarks.pdfDestinationXYZ.getFormattedZoom">
            <summary>
            Method that format the zoom value
            </summary>
            <returns>String with zoom value</returns>
        </member>
        <member name="T:sharpPDF.Collections.columnList">
            <summary>
            Class that represents a list of columns
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.columnList.#ctor">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.columnList.#ctor(sharpPDF.Collections.columnList)">
            <summary>
            Class's constructor
            </summary>
            <param name="val">Another columnList</param>
        </member>
        <member name="M:sharpPDF.Collections.columnList.#ctor(sharpPDF.Tables.pdfTableColumn[])">
            <summary>
            Class's constructor
            </summary>
            <param name="val">An array of pdfTableColumn</param>
        </member>
        <member name="P:sharpPDF.Collections.columnList.Item(System.Int32)">
            <summary>
            Class's Indexer
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.columnList.Add(sharpPDF.Tables.pdfTableColumn)">
            <summary>
            Method that adds a columns to the list
            </summary>
            <param name="val">Column object</param>
            <returns></returns>
        </member>
        <member name="M:sharpPDF.Collections.columnList.AddRange(sharpPDF.Tables.pdfTableColumn[])">
            <summary>
            Method that adds columns to the list
            </summary>
            <param name="val">Array of column objects</param>
        </member>
        <member name="M:sharpPDF.Collections.columnList.AddRange(sharpPDF.Collections.columnList)">
            <summary>
            Method that adds columns to the list
            </summary>
            <param name="val">Another columnList</param>
        </member>
        <member name="M:sharpPDF.Collections.columnList.Contains(sharpPDF.Tables.pdfTableColumn)">
            <summary>
            Method that shows if a columns is contained into the collection
            </summary>
            <param name="val">pdfTableColumn object</param>
            <returns>Value that tells if the object is contained</returns>
        </member>
        <member name="M:sharpPDF.Collections.columnList.CopyTo(sharpPDF.Tables.pdfTableColumn[],System.Int32)">
            <summary>
            Method that copies the columns into an array
            </summary>
            <param name="array">Array of columns</param>
            <param name="index">Start index</param>
        </member>
        <member name="M:sharpPDF.Collections.columnList.IndexOf(sharpPDF.Tables.pdfTableColumn)">
            <summary>
            Method that returns the index of a column object
            </summary>
            <param name="val">Column object</param>
            <returns>Index of the column inside the list</returns>
        </member>
        <member name="M:sharpPDF.Collections.columnList.Insert(System.Int32,sharpPDF.Tables.pdfTableColumn)">
            <summary>
            Method that inserts a column object at a defined index
            </summary>
            <param name="index">Index of the column</param>
            <param name="val">Column object</param>
        </member>
        <member name="M:sharpPDF.Collections.columnList.GetEnumerator">
            <summary>
            Method that retursn the enumerator of the list
            </summary>
            <returns>ColumnEnumerator object</returns>
        </member>
        <member name="M:sharpPDF.Collections.columnList.Remove(sharpPDF.Tables.pdfTableColumn)">
            <summary>
            Method that removes a column object
            </summary>
            <param name="val">Column to remove</param>
        </member>
        <member name="T:sharpPDF.Collections.columnList.columnEnumerator">
            <summary>
            Class that represents the columnList's enumerator
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.columnList.columnEnumerator.#ctor(sharpPDF.Collections.columnList)">
            <summary>
            Class's constructor
            </summary>
            <param name="mappings">Mappings</param>
        </member>
        <member name="P:sharpPDF.Collections.columnList.columnEnumerator.Current">
            <summary>
            The current element of the collection
            </summary>
        </member>
        <member name="P:sharpPDF.Collections.columnList.columnEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current element of the collection
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.columnList.columnEnumerator.MoveNext">
            <summary>
            Method that moves to the next element of the collection
            </summary>
            <returns>Value that tells of the operation was succesfully</returns>
        </member>
        <member name="M:sharpPDF.Collections.columnList.columnEnumerator.Reset">
            <summary>
            Method that moves the enumerator to the first position of the collection
            </summary>
        </member>
        <member name="T:sharpPDF.Collections.elementList">
            <summary>
            Class that represents a colledtion of pdfElements
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.elementList.#ctor">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.elementList.#ctor(sharpPDF.Collections.elementList)">
            <summary>
            Class's constructor
            </summary>
            <param name="val">Another elementList</param>
        </member>
        <member name="M:sharpPDF.Collections.elementList.#ctor(sharpPDF.Elements.pdfElement[])">
            <summary>
            Class's constructor
            </summary>
            <param name="val">An array of pdfElement</param>
        </member>
        <member name="P:sharpPDF.Collections.elementList.Item(System.Int32)">
            <summary>
            Class's Indexer
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.elementList.Add(sharpPDF.Elements.pdfElement)">
            <summary>
            Method that adds an element to the list
            </summary>
            <param name="val">Column object</param>
            <returns></returns>
        </member>
        <member name="M:sharpPDF.Collections.elementList.AddRange(sharpPDF.Elements.pdfElement[])">
            <summary>
            Method that adds element to the list
            </summary>
            <param name="val">Array of column objects</param>
        </member>
        <member name="M:sharpPDF.Collections.elementList.AddRange(sharpPDF.Collections.elementList)">
            <summary>
            Method that adds elements to the list
            </summary>
            <param name="val">Another columnList</param>
        </member>
        <member name="M:sharpPDF.Collections.elementList.Contains(sharpPDF.Elements.pdfElement)">
            <summary>
            Method that shows if a element is contained into the collection
            </summary>
            <param name="val">pdfElement object</param>
            <returns>Value that tells if the object is contained</returns>
        </member>
        <member name="M:sharpPDF.Collections.elementList.CopyTo(sharpPDF.Elements.pdfElement[],System.Int32)">
            <summary>
            Method that copies the elements into an array
            </summary>
            <param name="array">Array of elementf</param>
            <param name="index">Start index</param>
        </member>
        <member name="M:sharpPDF.Collections.elementList.IndexOf(sharpPDF.Elements.pdfElement)">
            <summary>
            Method that returns the index of a element object
            </summary>
            <param name="val">Element object</param>
            <returns>Index of the element inside the list</returns>
        </member>
        <member name="M:sharpPDF.Collections.elementList.Insert(System.Int32,sharpPDF.Elements.pdfElement)">
            <summary>
            Method that inserts a element object at a defined index
            </summary>
            <param name="index">Index of the element</param>
            <param name="val">Element object</param>
        </member>
        <member name="M:sharpPDF.Collections.elementList.GetEnumerator">
            <summary>
            Method that retursn the enumerator of the list
            </summary>
            <returns>ElementEnumerator object</returns>
        </member>
        <member name="M:sharpPDF.Collections.elementList.Remove(sharpPDF.Elements.pdfElement)">
            <summary>
            Method that removes a element object
            </summary>
            <param name="val">Element to remove</param>
        </member>
        <member name="T:sharpPDF.Collections.elementList.elementEnumerator">
            <summary>
            Class that represents the elementList's enumerator
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.elementList.elementEnumerator.#ctor(sharpPDF.Collections.elementList)">
            <summary>
            Class's constructor
            </summary>
            <param name="mappings">Mappings</param>
        </member>
        <member name="P:sharpPDF.Collections.elementList.elementEnumerator.Current">
            <summary>
            The current element of the collection
            </summary>
        </member>
        <member name="P:sharpPDF.Collections.elementList.elementEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current element of the collection
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.elementList.elementEnumerator.MoveNext">
            <summary>
            Method that moves to the next element of the collection
            </summary>
            <returns>Value that tells of the operation was succesfully</returns>
        </member>
        <member name="M:sharpPDF.Collections.elementList.elementEnumerator.Reset">
            <summary>
            Method that moves the enumerator to the first position of the collection
            </summary>
        </member>
        <member name="T:sharpPDF.Collections.fontHashtable">
            <summary>
            Class that represents a collection of pdfAbstractFont objects
            </summary>
        </member>
        <member name="T:sharpPDF.Collections.fontHashtableEnumerator">
            <summary>
            Enumerator of the fontHashtable's collection
            </summary>
        </member>
        <member name="T:sharpPDF.Collections.imageHashtable">
            <summary>
            Class that represents a collection of pdfImageReference objects
            </summary>
        </member>
        <member name="T:sharpPDF.Collections.imageHashtableEnumerator">
            <summary>
            Enumerator of the imageHashtable's collection
            </summary>
        </member>
        <member name="T:sharpPDF.Collections.paragraphLineList">
            <summary>
            Class that represents a list of paragraph's lines
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.paragraphLineList.#ctor">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.paragraphLineList.#ctor(sharpPDF.Collections.paragraphLineList)">
            <summary>
            Class's constructor
            </summary>
            <param name="val">Another paragraphLineList</param>
        </member>
        <member name="M:sharpPDF.Collections.paragraphLineList.#ctor(sharpPDF.Elements.paragraphLine[])">
            <summary>
            Class's constructor
            </summary>
            <param name="val">An array of paragraphLine</param>
        </member>
        <member name="P:sharpPDF.Collections.paragraphLineList.Item(System.Int32)">
            <summary>
            Class's Indexer
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.paragraphLineList.Add(sharpPDF.Elements.paragraphLine)">
            <summary>
            Method that adds a paragraphLine to the list
            </summary>
            <param name="val">ParagraphLine object</param>
            <returns></returns>
        </member>
        <member name="M:sharpPDF.Collections.paragraphLineList.AddRange(sharpPDF.Elements.paragraphLine[])">
            <summary>
            Method that adds paragraphLines to the list
            </summary>
            <param name="val">Array of paragraphLine objects</param>
        </member>
        <member name="M:sharpPDF.Collections.paragraphLineList.AddRange(sharpPDF.Collections.paragraphLineList)">
            <summary>
            Method that adds paragraphLines to the list
            </summary>
            <param name="val">Another paragraphLineList</param>
        </member>
        <member name="M:sharpPDF.Collections.paragraphLineList.Contains(sharpPDF.Elements.paragraphLine)">
            <summary>
            Method that shows if a paragraphLine is contained into the collection
            </summary>
            <param name="val">ParagraphLine object</param>
            <returns>Value that tells if the object is contained</returns>
        </member>
        <member name="M:sharpPDF.Collections.paragraphLineList.CopyTo(sharpPDF.Elements.paragraphLine[],System.Int32)">
            <summary>
            Method that copies the paragraphLines into an array
            </summary>
            <param name="array">Array of paragraphLines</param>
            <param name="index">Start index</param>
        </member>
        <member name="M:sharpPDF.Collections.paragraphLineList.IndexOf(sharpPDF.Elements.paragraphLine)">
            <summary>
            Method that returns the index of a paragraphLine object
            </summary>
            <param name="val">ParagraphLine object</param>
            <returns>Index of the paragraphLine inside the list</returns>
        </member>
        <member name="M:sharpPDF.Collections.paragraphLineList.Insert(System.Int32,sharpPDF.Elements.paragraphLine)">
            <summary>
            Method that inserts a paragraphLine object at a defined index
            </summary>
            <param name="index">Index of the paragraphLine</param>
            <param name="val">ParagraphLine object</param>
        </member>
        <member name="M:sharpPDF.Collections.paragraphLineList.GetEnumerator">
            <summary>
            Method that retursn the enumerator of the list
            </summary>
            <returns>ParagraphLineEnumerator object</returns>
        </member>
        <member name="M:sharpPDF.Collections.paragraphLineList.Remove(sharpPDF.Elements.paragraphLine)">
            <summary>
            Method that removes a paragraphLine object
            </summary>
            <param name="val">ParagraphLine to remove</param>
        </member>
        <member name="T:sharpPDF.Collections.paragraphLineList.paragraphLineEnumerator">
            <summary>
            Class that represents the paragraphLineList's enumerator
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.paragraphLineList.paragraphLineEnumerator.#ctor(sharpPDF.Collections.paragraphLineList)">
            <summary>
            Class's constructor
            </summary>
            <param name="mappings">Mappings</param>
        </member>
        <member name="P:sharpPDF.Collections.paragraphLineList.paragraphLineEnumerator.Current">
            <summary>
            The current element of the collection
            </summary>
        </member>
        <member name="P:sharpPDF.Collections.paragraphLineList.paragraphLineEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current element of the collection
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.paragraphLineList.paragraphLineEnumerator.MoveNext">
            <summary>
            Method that moves to the next element of the collection
            </summary>
            <returns>Value that tells of the operation was succesfully</returns>
        </member>
        <member name="M:sharpPDF.Collections.paragraphLineList.paragraphLineEnumerator.Reset">
            <summary>
            Method that moves the enumerator to the first position of the collection
            </summary>
        </member>
        <member name="T:sharpPDF.Collections.rowList">
            <summary>
            Class that represents a list of rows
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.rowList.#ctor">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.rowList.#ctor(sharpPDF.Collections.rowList)">
            <summary>
            Class's constructor
            </summary>
            <param name="val">Another rowList</param>
        </member>
        <member name="M:sharpPDF.Collections.rowList.#ctor(sharpPDF.Tables.pdfTableRow[])">
            <summary>
            Class's constructor
            </summary>
            <param name="val">An array of pdfTableRow</param>
        </member>
        <member name="P:sharpPDF.Collections.rowList.Item(System.Int32)">
            <summary>
            Class's Indexer
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.rowList.Add(sharpPDF.Tables.pdfTableRow)">
            <summary>
            Method that adds a row to the list
            </summary>
            <param name="val">Row object</param>
            <returns></returns>
        </member>
        <member name="M:sharpPDF.Collections.rowList.AddRange(sharpPDF.Tables.pdfTableRow[])">
            <summary>
            Method that adds row to the list
            </summary>
            <param name="val">Array of row objects</param>
        </member>
        <member name="M:sharpPDF.Collections.rowList.AddRange(sharpPDF.Collections.rowList)">
            <summary>
            Method that adds rows to the list
            </summary>
            <param name="val">Another rowList</param>
        </member>
        <member name="M:sharpPDF.Collections.rowList.Contains(sharpPDF.Tables.pdfTableRow)">
            <summary>
            Method that shows if a row is contained into the collection
            </summary>
            <param name="val">pdfTableRow object</param>
            <returns>Value that tells if the object is contained</returns>
        </member>
        <member name="M:sharpPDF.Collections.rowList.CopyTo(sharpPDF.Tables.pdfTableRow[],System.Int32)">
            <summary>
            Method that copies the row into an array
            </summary>
            <param name="array">Array of rows</param>
            <param name="index">Start index</param>
        </member>
        <member name="M:sharpPDF.Collections.rowList.IndexOf(sharpPDF.Tables.pdfTableRow)">
            <summary>
            Method that returns the index of a row object
            </summary>
            <param name="val">Row object</param>
            <returns>Index of the row inside the list</returns>
        </member>
        <member name="M:sharpPDF.Collections.rowList.Insert(System.Int32,sharpPDF.Tables.pdfTableRow)">
            <summary>
            Method that inserts a row object at a defined index
            </summary>
            <param name="index">Index of the row</param>
            <param name="val">Row object</param>
        </member>
        <member name="M:sharpPDF.Collections.rowList.GetEnumerator">
            <summary>
            Method that retursn the enumerator of the list
            </summary>
            <returns>ColumnEnumerator object</returns>
        </member>
        <member name="M:sharpPDF.Collections.rowList.Remove(sharpPDF.Tables.pdfTableRow)">
            <summary>
            Method that removes a row object
            </summary>
            <param name="val">Row to remove</param>
        </member>
        <member name="T:sharpPDF.Collections.rowList.rowEnumerator">
            <summary>
            Class that represents the rowList's enumerator
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.rowList.rowEnumerator.#ctor(sharpPDF.Collections.rowList)">
            <summary>
            Class's constructor
            </summary>
            <param name="mappings">Mappings</param>
        </member>
        <member name="P:sharpPDF.Collections.rowList.rowEnumerator.Current">
            <summary>
            The current element of the collection
            </summary>
        </member>
        <member name="P:sharpPDF.Collections.rowList.rowEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current element of the collection
            </summary>
        </member>
        <member name="M:sharpPDF.Collections.rowList.rowEnumerator.MoveNext">
            <summary>
            Method that moves to the next element of the collection
            </summary>
            <returns>Value that tells of the operation was succesfully</returns>
        </member>
        <member name="M:sharpPDF.Collections.rowList.rowEnumerator.Reset">
            <summary>
            Method that moves the enumerator to the first position of the collection
            </summary>
        </member>
        <member name="T:sharpPDF.Elements.annotationElement">
            <summary>
            Creates an annotation element.
            </summary>
        </member>
        <member name="M:sharpPDF.Elements.annotationElement.initializeStyleNames">
            <summary>
            Initializes the array of style names
            </summary>
        </member>
        <member name="M:sharpPDF.Elements.annotationElement.#ctor(System.String,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedAnnotationStyle)">
            <summary>
            Class's constructor
            </summary>
            <param name="newContent">Content of the annotation element</param>
            <param name="newCoordX">X position on page</param>
            <param name="newCoordY">Y position on page</param>
            <param name="newColor">The color of the annotation element</param>
            <param name="newStyle">The style of the annotation element</param>
        </member>
        <member name="M:sharpPDF.Elements.annotationElement.#ctor(System.String,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedAnnotationStyle,System.Boolean)">
            <summary>
            Class's constructor
            </summary>
            <param name="newContent">Content of the annotation element</param>
            <param name="newCoordX">X position on page</param>
            <param name="newCoordY">Y position on page</param>
            <param name="newColor">The color of the annotation element</param>
            <param name="newStyle">The style of the annotation element</param>
            <param name="open">Makes the annotation element open or closes at starttime</param>
        </member>
        <member name="P:sharpPDF.Elements.annotationElement.content">
            <summary>
            Sets the content of the annotation
            </summary>
        </member>
        <member name="P:sharpPDF.Elements.annotationElement.color">
            <summary>
            Sets the color of the annotation element
            </summary>
        </member>
        <member name="P:sharpPDF.Elements.annotationElement.style">
            <summary>
            The style of the Annotation
            </summary>
        </member>
        <member name="M:sharpPDF.Elements.annotationElement.getText">
            <summary>
            Method that returns the PDF codes to write the annotation in the document
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="M:sharpPDF.Elements.annotationElement.Clone">
            <summary>
            Method that clones the element
            </summary>
            <returns>Cloned object</returns>
        </member>
        <member name="T:sharpPDF.Elements.circleElement">
            <summary>
            A Class that implements a PDF circle.
            </summary>
        </member>
        <member name="M:sharpPDF.Elements.circleElement.#ctor(System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor)">
            <summary>
            Class's constructor
            </summary>
            <param name="X">X position in the PDF document</param>
            <param name="Y">Y position in the PDF document</param>
            <param name="Ray">Ray of the circle</param>
            <param name="strokeColor">Color of circle's border</param>
            <param name="fillColor">Color of the circle</param>
        </member>
        <member name="M:sharpPDF.Elements.circleElement.#ctor(System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor,System.Int32)">
            <summary>
            Class's constructor
            </summary>
            <param name="X">X position in the PDF document</param>
            <param name="Y">Y position in the PDF document</param>
            <param name="Ray">Ray of the circle</param>
            <param name="strokeColor">Color of circle's border</param>
            <param name="fillColor">Color of the circle</param>
            <param name="newWidth">Border's size</param>
        </member>
        <member name="M:sharpPDF.Elements.circleElement.#ctor(System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedLineStyle)">
            <summary>
            Class's constructor
            </summary>
            <param name="X">X position in the PDF document</param>
            <param name="Y">Y position in the PDF document</param>
            <param name="Ray">Ray of the circle</param>
            <param name="strokeColor">Color of circle's border</param>
            <param name="fillColor">Color of the circle</param>
            <param name="newStyle">Border's style</param>
        </member>
        <member name="M:sharpPDF.Elements.circleElement.#ctor(System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor,System.Int32,sharpPDF.Enumerators.predefinedLineStyle)">
            <summary>
            Class's constructor
            </summary>
            <param name="X">X position in the PDF document</param>
            <param name="Y">Y position in the PDF document</param>
            <param name="Ray">Ray of the circle</param>
            <param name="strokeColor">Color of circle's border</param>
            <param name="fillColor">Color of the circle</param>
            <param name="newWidth">Border's size</param>
            <param name="newStyle">Border's style</param>
        </member>
        <member name="M:sharpPDF.Elements.circleElement.getText">
            <summary>
            Method that returns the PDF codes to write the circle in the document
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="M:sharpPDF.Elements.circleElement.Clone">
            <summary>
            Method that clones the element
            </summary>
            <returns>Cloned object</returns>
        </member>
        <member name="T:sharpPDF.Elements.imageElement">
            <summary>
            A Class that implements a PDF image.
            </summary>
        </member>
        <member name="P:sharpPDF.Elements.imageElement.ObjectXReference">
            <summary>
            Image's Reference
            </summary>
        </member>
        <member name="M:sharpPDF.Elements.imageElement.#ctor(sharpPDF.Elements.pdfImageReference,System.Int32,System.Int32)">
            <summary>
            Class's constructor
            </summary>
            <param name="imageReference">Image's Reference</param>
            <param name="newCoordX">X position in the PDF document</param>
            <param name="newCoordY">Y position in the PDF document</param>
        </member>
        <member name="M:sharpPDF.Elements.imageElement.#ctor(sharpPDF.Elements.pdfImageReference,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Class's constructor
            </summary>
            <param name="imageReference">Image's Reference</param>
            <param name="newCoordX">X position in the PDF document</param>
            <param name="newCoordY">Y position in the PDF document</param>
            <param name="newHeight">New height of the image</param>
            <param name="newWidth">New width of the image</param>
        </member>
        <member name="M:sharpPDF.Elements.imageElement.getText">
            <summary>
            Method that returns the PDF codes to write the image in the document
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="M:sharpPDF.Elements.imageElement.Clone">
            <summary>
            Method that clones the element
            </summary>
            <returns>Cloned object</returns>
        </member>
        <member name="T:sharpPDF.Elements.lineElement">
            <summary>
            A Class that implements a PDF line.
            </summary>
        </member>
        <member name="M:sharpPDF.Elements.lineElement.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Class's constructor
            </summary>
            <param name="X">X position in the PDF document</param>
            <param name="Y">Y position in the PDF document</param>
            <param name="X1">X1 position in the PDF document</param>
            <param name="Y1">Y1 position in the PDF document</param>
        </member>
        <member name="M:sharpPDF.Elements.lineElement.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Class's constructor
            </summary>
            <param name="X">X position in the PDF document</param>
            <param name="Y">Y position in the PDF document</param>
            <param name="X1">X1 position in the PDF document</param>
            <param name="Y1">Y1 position in the PDF document</param>
            <param name="newWidth">Line's size</param>
        </member>
        <member name="M:sharpPDF.Elements.lineElement.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedLineStyle)">
            <summary>
            Class's constructor
            </summary>
            <param name="X">X position in the PDF document</param>
            <param name="Y">Y position in the PDF document</param>
            <param name="X1">X1 position in the PDF document</param>
            <param name="Y1">Y1 position in the PDF document</param>		
            <param name="newStyle">Line's style</param>
        </member>
        <member name="M:sharpPDF.Elements.lineElement.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedLineStyle)">
            <summary>
            Class's constructor
            </summary>
            <param name="X">X position in the PDF document</param>
            <param name="Y">Y position in the PDF document</param>
            <param name="X1">X1 position in the PDF document</param>
            <param name="Y1">Y1 position in the PDF document</param>		
            <param name="newWidth">Line's size</param>
            /// <param name="newStyle">Line's style</param>
        </member>
        <member name="M:sharpPDF.Elements.lineElement.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor)">
            <summary>
            Class's constructor
            </summary>
            <param name="X">X position in the PDF document</param>
            <param name="Y">Y position in the PDF document</param>
            <param name="X1">X1 position in the PDF document</param>
            <param name="Y1">Y1 position in the PDF document</param>	
            <param name="newColor">Line's color</param>
        </member>
        <member name="M:sharpPDF.Elements.lineElement.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedLineStyle,sharpPDF.pdfColor)">
            <summary>
            Class's constructor
            </summary>
            <param name="X">X position in the PDF document</param>
            <param name="Y">Y position in the PDF document</param>
            <param name="X1">X1 position in the PDF document</param>
            <param name="Y1">Y1 position in the PDF document</param>	
            <param name="newStyle">Line's style</param>
            <param name="newColor">Line's color</param>
        </member>
        <member name="M:sharpPDF.Elements.lineElement.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor)">
            <summary>
            Class's constructor
            </summary>
            <param name="X">X position in the PDF document</param>
            <param name="Y">Y position in the PDF document</param>
            <param name="X1">X1 position in the PDF document</param>
            <param name="Y1">Y1 position in the PDF document</param>	
            <param name="newWidth">Line's width</param>
            <param name="newColor">Line's color</param>
        </member>
        <member name="M:sharpPDF.Elements.lineElement.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedLineStyle,sharpPDF.pdfColor)">
            <summary>
            Class's constructor
            </summary>
            <param name="X">X position in the PDF document</param>
            <param name="Y">Y position in the PDF document</param>
            <param name="X1">X1 position in the PDF document</param>
            <param name="Y1">Y1 position in the PDF document</param>	
            <param name="newWidth">Line's size</param>
            <param name="newStyle">Line's style</param>
            <param name="newColor">Line's color</param>
        </member>
        <member name="M:sharpPDF.Elements.lineElement.getText">
            <summary>
            Method that returns the PDF codes to write the line in the document
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="M:sharpPDF.Elements.lineElement.Clone">
            <summary>
            Method that clones the element
            </summary>
            <returns>Cloned object</returns>
        </member>
        <member name="T:sharpPDF.Elements.paragraphElement">
            <summary>
            A Class that implements a PDF paragraph.
            </summary>
        </member>
        <member name="M:sharpPDF.Elements.paragraphElement.#ctor(sharpPDF.Collections.paragraphLineList,System.Int32,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32)">
            <summary>
            Class's constructor
            </summary>
            <param name="newContent">Text of the paragraph</param>
            <param name="paragraphWidth">Width of the paragraph</param>
            <param name="lineHeight">Height of a single line</param>
            <param name="newFontSize">Font's size</param>
            <param name="newFontType">Font's type</param>
            <param name="newCoordX">X position in the PDF document</param>
            <param name="newCoordY">Y position in the PDF document</param>
        </member>
        <member name="M:sharpPDF.Elements.paragraphElement.#ctor(sharpPDF.Collections.paragraphLineList,System.Int32,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,sharpPDF.pdfColor)">
            <summary>
            Class's constructor
            </summary>
            <param name="newContent">Text of the paragraph</param>
            <param name="paragraphWidth">Width of the paragraph</param>
            <param name="lineHeight">Height of a single line</param>
            <param name="newFontSize">Font's size</param>
            <param name="newFontType">Font's type</param>
            <param name="newCoordX">X position in the PDF document</param>
            <param name="newCoordY">Y position in the PDF document</param>
            <param name="newStrokeColor">Font's color</param>
        </member>
        <member name="P:sharpPDF.Elements.paragraphElement.content">
            <summary>
            IEnumerable interface that contains paragraph's lines
            </summary>
        </member>
        <member name="P:sharpPDF.Elements.paragraphElement.fontSize">
            <summary>
            Font's size
            </summary>
        </member>
        <member name="P:sharpPDF.Elements.paragraphElement.fontType">
            <summary>
            Font's type
            </summary>
        </member>
        <member name="M:sharpPDF.Elements.paragraphElement.getText">
            <summary>
            Method that returns the PDF codes to write the paragraph in the document
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="M:sharpPDF.Elements.paragraphElement.Clone">
            <summary>
            Method that clones the element
            </summary>
            <returns>Cloned object</returns>
        </member>
        <member name="T:sharpPDF.Elements.paragraphLine">
            <summary>
            A Class that implements a PDF paragraph's line.
            </summary>
        </member>
        <member name="P:sharpPDF.Elements.paragraphLine.LineLeftMargin">
            <summary>
            The left margin of the line
            </summary>
        </member>
        <member name="P:sharpPDF.Elements.paragraphLine.LineTopMargin">
            <summary>
            The top margin of the line
            </summary>
        </member>
        <member name="P:sharpPDF.Elements.paragraphLine.StrLine">
            <summary>
            The text of the line
            </summary>
        </member>
        <member name="M:sharpPDF.Elements.paragraphLine.#ctor(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont)">
            <summary>
            Class's constructor
            </summary>
            <param name="strLine">Text of the line</param>
            <param name="lineTopMargin">Top margin</param>
            <param name="lineLeftMargin">Left margin</param>
            <param name="fontType">Font Type</param>
        </member>
        <member name="M:sharpPDF.Elements.paragraphLine.getText">
            <summary>
            Method that returns the PDF codes to write the paragraph's line in the document
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="M:sharpPDF.Elements.paragraphLine.Clone">
            <summary>
            Method that clones the element
            </summary>
            <returns>Cloned object</returns>
        </member>
        <member name="T:sharpPDF.Elements.pdfElement">
            <summary>
            A Class that implements a generic PDF element.
            </summary>
        </member>
        <member name="F:sharpPDF.Elements.pdfElement._strokeColor">
            <summary>
            Element's color
            </summary>
        </member>
        <member name="F:sharpPDF.Elements.pdfElement._fillColor">
            <summary>
            Border's color
            </summary>
        </member>
        <member name="F:sharpPDF.Elements.pdfElement._objectID">
            <summary>
            Element's ID
            </summary>
        </member>
        <member name="F:sharpPDF.Elements.pdfElement._height">
            <summary>
            Height of the element
            </summary>
        </member>
        <member name="F:sharpPDF.Elements.pdfElement._width">
            <summary>
            Width of the element
            </summary>
        </member>
        <member name="P:sharpPDF.Elements.pdfElement.strokeColor">
            <summary>
            Border's color
            </summary>
        </member>
        <member name="P:sharpPDF.Elements.pdfElement.fillColor">
            <summary>
            Element's Color
            </summary>
        </member>
        <member name="P:sharpPDF.Elements.pdfElement.height">
            <summary>
            Height of the element
            </summary>
        </member>
        <member name="P:sharpPDF.Elements.pdfElement.width">
            <summary>
            Width of the element
            </summary>
        </member>
        <member name="P:sharpPDF.Elements.pdfElement.objectID">
            <summary>
            Element's ID
            </summary>
        </member>
        <member name="M:sharpPDF.Elements.pdfElement.getText">
            <summary>
            Method that returns the PDF codes to write the generic element in the document. It must be implemented by the derived class
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="M:sharpPDF.Elements.pdfElement.Clone">
            <summary>
            Method that clones the element
            </summary>
            <returns>Cloned object</returns>
        </member>
        <member name="T:sharpPDF.Elements.pdfImageReference">
            <summary>
            Class that represents an image reference inside the document.
            </summary>
        </member>
        <member name="P:sharpPDF.Elements.pdfImageReference.ObjectID">
            <summary>
            Object's ID
            </summary>
        </member>
        <member name="P:sharpPDF.Elements.pdfImageReference.height">
            <summary>
            Image's Height
            </summary>
        </member>
        <member name="P:sharpPDF.Elements.pdfImageReference.width">
            <summary>
            Image's Width
            </summary>
        </member>
        <member name="P:sharpPDF.Elements.pdfImageReference.content">
            <summary>
            Image's bytes
            </summary>
        </member>
        <member name="M:sharpPDF.Elements.pdfImageReference.#ctor(System.String)">
            <summary>
            Class's constructor
            </summary>
            <param name="imageName">Name of the image file</param>
        </member>
        <member name="M:sharpPDF.Elements.pdfImageReference.#ctor(System.Drawing.Image)">
            <summary>
            Class's constructor
            </summary>
            <param name="myImage">System.Drawing.Image object</param>
        </member>
        <member name="M:sharpPDF.Elements.pdfImageReference.getText">
            <summary>
            Method that returns the PDF codes to write the image reference in the document.
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="T:sharpPDF.Elements.rectangleElement">
            <summary>
            A Class that implements a PDF rectangle.
            </summary>
        </member>
        <member name="M:sharpPDF.Elements.rectangleElement.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor)">
            <summary>
            Class's constructor
            </summary>
            <param name="X">X position of the rectangle in the page</param>
            <param name="Y">Y position of the rectangle in the page</param>
            <param name="X1">X1 position of the rectangle in the page</param>
            <param name="Y1">Y1 position of the rectangle in the page</param>
            <param name="strokeColor">Border's color</param>
            <param name="fillColor">Rectancle's color</param>
        </member>
        <member name="M:sharpPDF.Elements.rectangleElement.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor,System.Int32)">
            <summary>
            Method that adds a rectangle to the page object
            </summary>
            <param name="X">X position of the rectangle in the page</param>
            <param name="Y">Y position of the rectangle in the page</param>
            <param name="X1">X1 position of the rectangle in the page</param>
            <param name="Y1">Y1 position of the rectangle in the page</param>
            <param name="strokeColor">Border's color</param>
            <param name="fillColor">Rectancle's color</param>
            <param name="newWidth">Border's width</param>
        </member>
        <member name="M:sharpPDF.Elements.rectangleElement.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedLineStyle)">
            <summary>
            Method that adds a rectangle to the page object
            </summary>
            <param name="X">X position of the rectangle in the page</param>
            <param name="Y">Y position of the rectangle in the page</param>
            <param name="X1">X1 position of the rectangle in the page</param>
            <param name="Y1">Y1 position of the rectangle in the page</param>
            <param name="strokeColor">Border's color</param>
            <param name="fillColor">Rectancle's color</param>
            <param name="newStyle">Border's style</param>
        </member>
        <member name="M:sharpPDF.Elements.rectangleElement.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor,System.Int32,sharpPDF.Enumerators.predefinedLineStyle)">
            <summary>
            Method that adds a rectangle to the page object
            </summary>
            <param name="X">X position of the rectangle in the page</param>
            <param name="Y">Y position of the rectangle in the page</param>
            <param name="X1">X1 position of the rectangle in the page</param>
            <param name="Y1">Y1 position of the rectangle in the page</param>
            <param name="strokeColor">Border's color</param>
            <param name="fillColor">Rectancle's color</param>
            <param name="newWidth">Border's width</param>
            <param name="newStyle">Border's style</param>
        </member>
        <member name="M:sharpPDF.Elements.rectangleElement.getText">
            <summary>
            Method that returns the PDF codes to write the rectangle in the document
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="M:sharpPDF.Elements.rectangleElement.Clone">
            <summary>
            Method that clones the element
            </summary>
            <returns>Cloned object</returns>
        </member>
        <member name="T:sharpPDF.Elements.textElement">
            <summary>
            A Class that implements simple PDF text.
            </summary>
        </member>
        <member name="M:sharpPDF.Elements.textElement.#ctor(System.String,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32)">
            <summary>
            Class's constructor
            </summary>
            <param name="newContent">Text's content</param>
            <param name="newFontSize">Font's size</param>
            <param name="newFontType">Font's type</param>
            <param name="newCoordX">X position of the text in the page</param>
            <param name="newCoordY">Y position of the text in the page</param>
        </member>
        <member name="M:sharpPDF.Elements.textElement.#ctor(System.String,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,sharpPDF.pdfColor)">
            <summary>
            Class's constructor
            </summary>
            <param name="newContent">Text's content</param>
            <param name="newFontSize">Font's size</param>
            <param name="newFontType">Font's type</param>
            <param name="newCoordX">X position of the text in the page</param>
            <param name="newCoordY">Y position of the text in the page</param>
            <param name="newStrokeColor">Font's color</param>
        </member>
        <member name="P:sharpPDF.Elements.textElement.content">
            <summary>
            Text's content
            </summary>
        </member>
        <member name="P:sharpPDF.Elements.textElement.fontSize">
            <summary>
            Font's size
            </summary>
        </member>
        <member name="P:sharpPDF.Elements.textElement.fontType">
            <summary>
            Font's type
            </summary>
        </member>
        <member name="M:sharpPDF.Elements.textElement.getText">
            <summary>
            Method that returns the PDF codes to write the text in the document
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="M:sharpPDF.Elements.textElement.Clone">
            <summary>
            Method that clones the element
            </summary>
            <returns>Cloned object</returns>
        </member>
        <member name="T:sharpPDF.Enumerators.documentFontEncoding">
            <summary>
            Enumerator that implements font encoding
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.documentFontEncoding.csWinAnsiEncoding">
            <summary>
            WinAnsi Font Encoding
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.documentFontEncoding.csIdentityH">
            <summary>
            Identity-H Font Encoding
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.documentFontEncoding.csIdentityV">
            <summary>
            Identity-V Font Encoding
            </summary>
        </member>
        <member name="T:sharpPDF.Enumerators.documentFontType">
            <summary>
            Enumerators that implements font types.
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.documentFontType.csPredefinedfont">
            <summary>
            Predefined Font(loaded with AFM files)
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.documentFontType.csTrueTypeFont">
            <summary>
            True Type Font(loadad with TTF files)
            </summary>
        </member>
        <member name="T:sharpPDF.Enumerators.glyphType">
            <summary>
            Enumerator that implements the glyph type
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.glyphType.csTwoArgs">
            <summary>
            Composite Glyph with two arguments
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.glyphType.csSingleScale">
            <summary>
            This indicates that there is a simple scale for the glyph
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.glyphType.csMoreComponents">
            <summary>
            Indicates at least one more glyph after this one
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.glyphType.csDoubleScale">
            <summary>
            This indicates that there is a double scale for the glyph
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.glyphType.csTwoByTwo">
            <summary>
            There is a  2 by 2 transormation that will be used to scale the component
            </summary>
        </member>
        <member name="T:sharpPDF.Enumerators.pdfDestinationType">
            <summary>
            Enumerator that implements the type of pdf's destination.
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.pdfDestinationType.csNone">
            <summary>
            Null pdf's destination
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.pdfDestinationType.csXYZ">
            <summary>
            Pdf's destination with top, left and zoom value
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.pdfDestinationType.csFit">
            <summary>
            Pdf's destination that shows the entire page
            within the window both horizontally and vertically.
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.pdfDestinationType.csFitH">
            <summary>
            Pdf's destination that display the page with the vertical coordinate top positioned
            at the top edge of the window
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.pdfDestinationType.csFitV">
            <summary>
            Pdf's destination that display the page with the horizontal coordinate left positioned
            at the left edge of the window
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.pdfDestinationType.csFitR">
            <summary>
            Pdf's destination that display the page with its contents magnified just enough
            to fit the rectangle specified by the coordinates left, bottom, right, and top
            entirely within the window both horizontally and vertically.
            </summary>
        </member>
        <member name="T:sharpPDF.Enumerators.predefinedLineStyle">
            <summary>
            Enumerator that implements the style of a line.
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedLineStyle.csNormal">
            <summary>
            Normal line
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedLineStyle.csOutlinedSmall">
            <summary>
            Thin Outlined line
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedLineStyle.csOutlined">
            <summary>
            Outlined line
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedLineStyle.csOutlinedBig">
            <summary>
            Big Outlined line
            </summary>
        </member>
        <member name="T:sharpPDF.Enumerators.predefinedAlignment">
            <summary>
            Enumerator that implements the alignment of a paragraph.
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedAlignment.csLeft">
            <summary>
            Left Alignment
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedAlignment.csRight">
            <summary>
            Right Alignment
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedAlignment.csCenter">
            <summary>
            Center Alignment
            </summary>
        </member>
        <member name="T:sharpPDF.Enumerators.predefinedAnnotationStyle">
            <summary>
            Enumerator that implements annotation styles.
            inserted by smeyer82 (2004)
            </summary>	
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedAnnotationStyle.csNone">
            <summary>
            None
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedAnnotationStyle.csComment">
            <summary>
            Annotation comment
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedAnnotationStyle.csKey">
            <summary>
            Annotation key
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedAnnotationStyle.csNote">
            <summary>
            Annotation note
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedAnnotationStyle.csHelp">
            <summary>
            Annotation help
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedAnnotationStyle.csNewParagraph">
            <summary>
            Annotation new paragraph
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedAnnotationStyle.csParagraph">
            <summary>
            Annotation paragraph
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedAnnotationStyle.csInsert">
            <summary>
            Annotation insert
            </summary>
        </member>
        <member name="T:sharpPDF.Enumerators.predefinedFont">
            <summary>
            Enumerator that implements standard PDF fonts.
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedFont.csHelvetica">
            <summary>
            Font Helvetica
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedFont.csHelveticaBold">
            <summary>
            Font Helvetica Bold
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedFont.csHelveticaOblique">
            <summary>
            Font Helvetica Oblique
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedFont.csHelvetivaBoldOblique">
            <summary>
            Font Helvetica Bold Oblique
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedFont.csCourier">
            <summary>
            Font Courier
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedFont.csCourierBold">
            <summary>
            Font Courier Bold
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedFont.csCourierOblique">
            <summary>
            Font Courier Oblique
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedFont.csCourierBoldOblique">
            <summary>
            Font Courier Bold Oblique
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedFont.csTimes">
            <summary>
            Font Times
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedFont.csTimesBold">
            <summary>
            Font Times Bold
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedFont.csTimesOblique">
            <summary>
            Font Times Oblique
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedFont.csTimesBoldOblique">
            <summary>
            Font Times Bold Oblique
            </summary>
        </member>
        <member name="T:sharpPDF.Enumerators.predefinedMarkerStyle">
            <summary>
            Enumerator that implements standard PDF page's markers.
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedMarkerStyle.csArabic">
            <summary>
            Numeric page's marker
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedMarkerStyle.csRoman">
            <summary>
            Literal page's marker
            </summary>
        </member>
        <member name="T:sharpPDF.Enumerators.predefinedPageSize">
            <summary>
            Enumerator that implements standard PDF page's sizes.
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedPageSize.csSharpPDFFormat">
            <summary>
            612h X 792h 
            </summary>		
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedPageSize.csA1Page">
            <summary>
            1655w X 2288h
            </summary>		
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedPageSize.csA2Page">
            <summary>
            1191w X 1684h
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedPageSize.csA3Page">
            <summary>
            842w X 1191h
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedPageSize.csA4Page">
            <summary>
            595w X 842h
            </summary>
        </member>
        <member name="T:sharpPDF.Enumerators.predefinedVerticalAlignment">
            <summary>
            Enumerator that implements the alignment of a paragraph.
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedVerticalAlignment.csTop">
            <summary>
            Top Alignment
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedVerticalAlignment.csMiddle">
            <summary>
            Middle Alignment
            </summary>
        </member>
        <member name="F:sharpPDF.Enumerators.predefinedVerticalAlignment.csBottom">
            <summary>
            Bottom Alignment
            </summary>
        </member>
        <member name="T:sharpPDF.Exceptions.pdfBadColumnIndexException">
            <summary>
            Exception that represents an error during an access on the pdfTableRow's columns with a bad index
            </summary>
        </member>
        <member name="M:sharpPDF.Exceptions.pdfBadColumnIndexException.#ctor">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="T:sharpPDF.Exceptions.pdfBadFontFileException">
            <summary>
            Exception that represents an error during the I/O on the buffer.
            </summary>
        </member>
        <member name="M:sharpPDF.Exceptions.pdfBadFontFileException.#ctor">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="T:sharpPDF.Exceptions.pdfBadRowHeightException">
            <summary>
            Exception that represents a row longer than maximum table space
            </summary>
        </member>
        <member name="M:sharpPDF.Exceptions.pdfBadRowHeightException.#ctor">
            <summary>
            Class's Costructor
            </summary>
        </member>
        <member name="T:sharpPDF.Exceptions.pdfBadRowIndexException">
            <summary>
            Exception that represents an error during an access on the pdfTable's rows with a bad index
            </summary>
        </member>
        <member name="M:sharpPDF.Exceptions.pdfBadRowIndexException.#ctor">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="T:sharpPDF.Exceptions.pdfBufferErrorException">
            <summary>
            Exception that represents an error during the I/O on the buffer.
            </summary>
        </member>
        <member name="M:sharpPDF.Exceptions.pdfBufferErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Class's constructor
            </summary>
            <param name="message">Message for the exception</param>
            <param name="ex">Inner exception</param>
        </member>
        <member name="T:sharpPDF.Exceptions.pdfCMAPNotSupportedException">
            <summary>
            Exception that represents an incompatible Character Mapping Table[The Font MUST be Windows/Unicode Or MAC].
            </summary>
        </member>
        <member name="M:sharpPDF.Exceptions.pdfCMAPNotSupportedException.#ctor">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="T:sharpPDF.Exceptions.pdfException">
            <summary>
            Generic PDF Exception.
            </summary>
        </member>
        <member name="M:sharpPDF.Exceptions.pdfException.#ctor(System.String,System.Exception)">
            <summary>
            Class's constructor
            </summary>
            <param name="message">Message for the exception</param>
            <param name="ex">Inner exception</param>
        </member>
        <member name="T:sharpPDF.Exceptions.pdfFontNotLoadedException">
            <summary>
            Exception that represents a nonexistent font
            </summary>
        </member>
        <member name="M:sharpPDF.Exceptions.pdfFontNotLoadedException.#ctor">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="T:sharpPDF.Exceptions.pdfGenericIOException">
            <summary>
            Exception that represents a generic error during the I/O.
            </summary>
        </member>
        <member name="M:sharpPDF.Exceptions.pdfGenericIOException.#ctor(System.String,System.Exception)">
            <summary>
            Class's constructor
            </summary>
            <param name="message">Message for the exception</param>
            <param name="ex">Inner exception</param>
        </member>
        <member name="T:sharpPDF.Exceptions.pdfImageIOException">
            <summary>
            Exception that represents an error during the I/O of an image file.
            </summary>
        </member>
        <member name="M:sharpPDF.Exceptions.pdfImageIOException.#ctor(System.String,System.Exception)">
            <summary>
            Class's constructor
            </summary>
            <param name="message">Message for the exception</param>
            <param name="ex">Inner exception</param>
        </member>
        <member name="T:sharpPDF.Exceptions.pdfImageNotFoundException">
            <summary>
            Exception that represents an nonexistent image 
            </summary>
        </member>
        <member name="M:sharpPDF.Exceptions.pdfImageNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Class's constructor
            </summary>
            <param name="message">Message for the exception</param>
            <param name="ex">Inner exception</param>
        </member>
        <member name="T:sharpPDF.Exceptions.pdfImageNotLoadedException">
            <summary>
            Exception that represents a nonexistent image
            </summary>
        </member>
        <member name="M:sharpPDF.Exceptions.pdfImageNotLoadedException.#ctor">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="T:sharpPDF.Exceptions.pdfWritingErrorException">
            <summary>
            Exception that represents an error during the writing of the PDF document.
            </summary>
        </member>
        <member name="M:sharpPDF.Exceptions.pdfWritingErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Class's constructor
            </summary>
            <param name="message">Message for the exception</param>
            <param name="ex">Inner exception</param>
        </member>
        <member name="T:sharpPDF.Fonts.AFM.afmFontReader">
            <summary>
            Class that reads an afm file to import the font metric into the PDF font object.
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.AFM.afmFontReader.#ctor(System.String)">
            <summary>
            Class's Constructor
            </summary>
            <param name="fontReference">Font Reference</param>
        </member>
        <member name="M:sharpPDF.Fonts.AFM.afmFontReader.getFontDefinition">
            <summary>
            Method that returs the definition of a font
            </summary>
            <returns>Font definition object</returns>
        </member>
        <member name="M:sharpPDF.Fonts.AFM.afmFontReader.getCharacterMetric(System.String)">
            <summary>
            Method that returns the metric of a single character
            </summary>
            <param name="characterMetric">String that contains character info</param>
            <returns>Character Metric Object</returns>
        </member>
        <member name="M:sharpPDF.Fonts.AFM.afmFontReader.Dispose">
            <summary>
            Class's destructor
            </summary>
        </member>
        <member name="T:sharpPDF.Fonts.CharacterMetric">
            <summary>
            Structure that represents a single character metric
            </summary>
        </member>
        <member name="F:sharpPDF.Fonts.CharacterMetric.characterMapping">
            <summary>
            Character's Mapping code
            </summary>
        </member>
        <member name="F:sharpPDF.Fonts.CharacterMetric.characterWidth">
            <summary>
            Character's width
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.CharacterMetric.CompareTo(System.Object)">
            <summary>
            Method that compare character metrics on the characterMapping property
            </summary>
            <param name="obj">Object to compare</param>
            <returns>Boolean value that returns the result of the check</returns>
        </member>
        <member name="T:sharpPDF.Fonts.FontReader">
            <summary>
            Abstract Class for a generic Font Readers
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.FontReader.#ctor(System.String)">
            <summary>
            Class's Constructor
            </summary>
            <param name="fontReference">Font Reference</param>
        </member>
        <member name="M:sharpPDF.Fonts.FontReader.getFontDefinition">
            <summary>
            Method that returs the definition of a font
            </summary>
            <returns>Font definition object</returns>
        </member>
        <member name="M:sharpPDF.Fonts.FontReader.Dispose">
            <summary>
            Method that releases all the resources of the FontReader
            </summary>
        </member>
        <member name="T:sharpPDF.Fonts.GlyphConverter">
            <summary>
            Class that contains several methods for the conversion between Unicode and Glyphs
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.GlyphConverter.#cctor">
            <summary>
            Static class's constructor
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.GlyphConverter.UnicodeFromGlyph(System.String)">
            <summary>
            Method that returns the Unicode Index of a Glyph
            </summary>
            <param name="glyphName">Glyph Name</param>
            <returns>Unicode Index</returns>
        </member>
        <member name="M:sharpPDF.Fonts.GlyphConverter.GlyphFromUnicode(System.Int32)">
            <summary>
            Method that returns a Glyph From a Unicode Index
            </summary>
            <param name="unicodeIndex">Unicode Index</param>
            <returns>Glyph</returns>
        </member>
        <member name="M:sharpPDF.Fonts.GlyphConverter.pdfCodeFromGlyph(System.String)">
            <summary>
            Method that returns a PDF Code From a Glyph
            </summary>
            <param name="glyphName">Glyph Name</param>
            <returns>PDF Code</returns>
        </member>
        <member name="M:sharpPDF.Fonts.GlyphConverter.pdfCodeFromUnicode(System.Int32)">
            <summary>
            Method that returns a PDF Code From a Unicode Index
            </summary>
            <param name="unicodeIndex">Unicode Index</param>
            <returns>PDF Code</returns>
        </member>
        <member name="T:sharpPDF.Fonts.pdfAbstractFont">
            <summary>
            Class that represents an abstract PDF font.
            </summary>
        </member>
        <member name="F:sharpPDF.Fonts.pdfAbstractFont._objectID">
            <summary>
            ID of the object
            </summary>
        </member>
        <member name="F:sharpPDF.Fonts.pdfAbstractFont._fontNumber">
            <summary>
            Number of the font
            </summary>
        </member>
        <member name="F:sharpPDF.Fonts.pdfAbstractFont._fontDefinition">
            <summary>
            Font's definition object
            </summary>
        </member>
        <member name="F:sharpPDF.Fonts.pdfAbstractFont._encodingType">
            <summary>
            Font's encoding type
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfAbstractFont.objectID">
            <summary>
            Font's ID
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfAbstractFont.fontNumber">
            <summary>
            Font's Number
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfAbstractFont.fontDefinition">
            <summary>
            Font's Definition Object
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfAbstractFont.encodingType">
            <summary>
            Font's encoding type
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.pdfAbstractFont.#ctor(sharpPDF.Fonts.pdfFontDefinition,System.Int32,sharpPDF.Enumerators.documentFontEncoding)">
            <summary>
            Class's constructor
            </summary>
            <param name="fontDefinition">Font's Definition Object</param>
            <param name="fontNumber">Font's Number</param>
            <param name="encodingType">Font's encoding type</param>
        </member>
        <member name="M:sharpPDF.Fonts.pdfAbstractFont.getText">
            <summary>
            Method that returns the PDF codes to write the generic pdf font in the document. It must be implemented by the derived class
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="M:sharpPDF.Fonts.pdfAbstractFont.encodeText(System.String)">
            <summary>
            Method that returns the Encoded String.The Encoding depends on the font object
            </summary>
            <param name="strText">String to Encode</param>
            <returns>Encoded String</returns>
        </member>
        <member name="M:sharpPDF.Fonts.pdfAbstractFont.cleanText(System.String)">
            <summary>
            Method that returns a string without the unsupported characters
            </summary>
            <param name="strText">Text to Clean</param>
            <returns>Cleaned Text</returns>
        </member>
        <member name="M:sharpPDF.Fonts.pdfAbstractFont.getWordWidth(System.String,System.Int32)">
            <summary>
            Method that returns the horizontal space of a single word. It depends on the font object
            </summary>
            <param name="strWord">Word</param>
            <param name="fontSize">Font's size</param>
            <returns>Word's Width</returns>
        </member>
        <member name="M:sharpPDF.Fonts.pdfAbstractFont.cropWord(System.String,System.Int32,System.Int32)">
            <summary>
            Method that returns a cropped word
            </summary>
            <param name="strWord">Word</param>
            <param name="maxLengh">Maximum length</param>
            <param name="fontSize">Font's size</param>
            <returns>The cropped word</returns>
        </member>
        <member name="T:sharpPDF.Fonts.pdfCharacterMetric">
            <summary>
            Class that represent a character metric
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfCharacterMetric.charName">
            <summary>
            Character Name
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfCharacterMetric.charIndex">
            <summary>
            Character Index
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfCharacterMetric.charWidth">
            <summary>
            Character Width
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.pdfCharacterMetric.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Class's constructor
            </summary>
            <param name="charName">Character Name</param>
            <param name="charIndex">Character Index</param>
            <param name="charWidth">Character Width</param>
        </member>
        <member name="T:sharpPDF.Fonts.pdfFontDefinition">
            <summary>
            Class that represents a definition for a PDF font
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfFontDefinition.fontName">
            <summary>
            Name of the font
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfFontDefinition.fullFontName">
            <summary>
            Full name of the font
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfFontDefinition.familyName">
            <summary>
            Family of the font
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfFontDefinition.fontWeight">
            <summary>
            Font's Weight
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfFontDefinition.isFixedPitch">
            <summary>
            Property that shows if the character uses a fixed spacing
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfFontDefinition.italicAngle">
            <summary>
            Font's Italic Angle
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfFontDefinition.characterSet">
            <summary>
            Name of the character set
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfFontDefinition.underlinePosition">
            <summary>
            Position of the underline symbol
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfFontDefinition.underlineThickness">
            <summary>
            Thickness of the underline symbol
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfFontDefinition.encodingScheme">
            <summary>
            Name of the encoding scheme
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfFontDefinition.capHeight">
            <summary>
            Font's Cap Height
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfFontDefinition.ascender">
            <summary>
            Font's Ascender
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfFontDefinition.descender">
            <summary>
            Font's Descender
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfFontDefinition.StdHW">
            <summary>
            Font's StdHW
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfFontDefinition.StdVW">
            <summary>
            Font's StdVW
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfFontDefinition.fontBBox">
            <summary>
            Font's BBox
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfFontDefinition.fontHeight">
            <summary>
            Height of the font
            </summary>
        </member>
        <member name="P:sharpPDF.Fonts.pdfFontDefinition.fontMetrics">
            <summary>
            Width of all characters
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.pdfFontDefinition.#ctor">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.pdfFontDefinition.validateFontDefinition">
            <summary>
            Method that validates a font definition
            </summary>
            <returns>Boolean value that shows if the object is a valid font definition</returns>
        </member>
        <member name="T:sharpPDF.Fonts.pdfFontFactory">
            <summary>
            Class that represents a Font Factory
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.pdfFontFactory.getFontObject(System.String,System.Int32,sharpPDF.Enumerators.documentFontType)">
            <summary>
            Method that returns an abstract font object[pdfAbstractFont Factory]
            </summary>
            <param name="fontReference">Font Name(for predefined fonts) or Font File</param>
            <param name="fontNumber">Number of the font inside the PDF</param>
            <param name="fontType">Type of the font</param>
            <returns>Abstract Font Object</returns>
        </member>
        <member name="M:sharpPDF.Fonts.pdfFontFactory.getFontReader(System.String,sharpPDF.Enumerators.documentFontType)">
            <summary>
            Method that returns a generic font reader[FontReader Factory]
            </summary>
            <param name="fontReference">Font Name(for predefined fonts) or Font File</param>
            <param name="fontType">Type of the font</param>
            <returns>Generic Font Reader Object</returns>
        </member>
        <member name="M:sharpPDF.Fonts.pdfFontFactory.getPredefinedFontName(sharpPDF.Enumerators.predefinedFont)">
            <summary>
            Method that returns that font name for a predefined font
            </summary>
            <param name="fontStyle">Font style</param>
            <returns>Predefined font name</returns>
        </member>
        <member name="M:sharpPDF.Fonts.pdfFontFactory.isPredefinedFont(System.String)">
            <summary>
            Method that returns if the font reference is a predefined font
            </summary>
            <param name="fontReference">Font Reference</param>
            <returns>Boolean value that shows if the font reference is a predefined font</returns>
        </member>
        <member name="T:sharpPDF.Fonts.pdfPredefinedFont">
            <summary>
            Class that representa a predefined font
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.pdfPredefinedFont.#ctor(sharpPDF.Fonts.pdfFontDefinition,System.Int32,sharpPDF.Enumerators.documentFontEncoding)">
            <summary>
            Class's constructor
            </summary>
            <param name="fontDefinition">Font's Definition Object</param>
            <param name="fontNumber">Number of the font into the PDF document</param>
            <param name="encodingType">Font's encoding type</param>
        </member>
        <member name="M:sharpPDF.Fonts.pdfPredefinedFont.getText">
            <summary>
            Method that returns the PDF codes to write the Font in the document
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="M:sharpPDF.Fonts.pdfPredefinedFont.encodeText(System.String)">
            <summary>
            
            </summary>
            <param name="strText"></param>
            <returns></returns>
        </member>
        <member name="M:sharpPDF.Fonts.pdfPredefinedFont.cleanText(System.String)">
            <summary>
            Method that removes from the text the unsupported characters
            </summary>
            <param name="strText">Text to clean</param>
            <returns>Cleaned Text</returns>
        </member>
        <member name="M:sharpPDF.Fonts.pdfPredefinedFont.getWordWidth(System.String,System.Int32)">
            <summary>
            Method that returns the width of a string
            </summary>
            <param name="strWord">Text</param>
            <param name="fontSize">Font's size</param>
            <returns></returns>
        </member>
        <member name="M:sharpPDF.Fonts.pdfPredefinedFont.cropWord(System.String,System.Int32,System.Int32)">
            <summary>
            Method that returns a cropped word
            </summary>
            <param name="strWord">Word</param>
            <param name="maxLength">Maximum length</param>
            <param name="fontSize">Font's size</param>		
            <returns>The cropped word</returns>
        </member>
        <member name="T:sharpPDF.Fonts.pdfTrueTypeFont">
            <summary>
            Class that represents a True Type Font
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.pdfTrueTypeFont.#ctor(sharpPDF.Fonts.pdfFontDefinition,System.Int32,sharpPDF.Enumerators.documentFontEncoding,System.String)">
            <summary>
            Class's costructor
            </summary>
            <param name="fontDefinition">Definition of the Font</param>
            <param name="fontNumber">Font's number</param>
            <param name="encodingType">Encoding's Type</param>
            <param name="fontReference">Font's reference name</param>
        </member>
        <member name="M:sharpPDF.Fonts.pdfTrueTypeFont.getText">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:sharpPDF.Fonts.pdfTrueTypeFont.getFontDescriptorText">
            <summary>
            Method that returns the PDF font descriptor
            </summary>
            <returns>String that contains PDF commands</returns>
        </member>
        <member name="M:sharpPDF.Fonts.pdfTrueTypeFont.getFontDescendantText">
            <summary>
            Method that returns the PDF font descendant
            </summary>
            <returns>String that contains PDF commands</returns>
        </member>
        <member name="M:sharpPDF.Fonts.pdfTrueTypeFont.getToUnicodeText">
            <summary>
            Method that returns the PDF font ToUnicode Tag
            </summary>
            <returns>String that contains PDF commands</returns>
        </member>
        <member name="M:sharpPDF.Fonts.pdfTrueTypeFont.getStreamText">
            <summary>
            Method that returns the PDF font stream
            </summary>
            <returns>String that contains PDF commands</returns>
        </member>
        <member name="M:sharpPDF.Fonts.pdfTrueTypeFont.createFontSubset">
            <summary>
            Method that creates the PDF font subset
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.pdfTrueTypeFont.encodeText(System.String)">
            <summary>
            Method that encodes the text
            </summary>
            <param name="strText">String to encode</param>
            <returns>Encoded string</returns>
        </member>
        <member name="M:sharpPDF.Fonts.pdfTrueTypeFont.addCharacters(System.String)">
            <summary>
            Method that adds new characters to the "used characters" collection
            </summary>
            <param name="myText">Text</param>
        </member>
        <member name="M:sharpPDF.Fonts.pdfTrueTypeFont.cleanText(System.String)">
            <summary>
            Method that removes the unsupported characters from the text
            </summary>
            <param name="strText">Text to clean</param>
            <returns>Cleaned text</returns>
        </member>
        <member name="M:sharpPDF.Fonts.pdfTrueTypeFont.getWordWidth(System.String,System.Int32)">
            <summary>
            Method that returns the width of a string
            </summary>
            <param name="strWord">Text</param>
            <param name="fontSize">Font's size</param>
            <returns>Text's Width</returns>
        </member>
        <member name="M:sharpPDF.Fonts.pdfTrueTypeFont.cropWord(System.String,System.Int32,System.Int32)">
            <summary>
            Method that returns a cropped word
            </summary>
            <param name="strWord">Word</param>
            <param name="maxLength">Maximum length</param>
            <param name="fontSize">Font's size</param>
            <returns>The cropped word</returns>
        </member>
        <member name="T:sharpPDF.Fonts.TTF.CMAPTable">
            <summary>
            CMAP Table
            </summary>
        </member>
        <member name="T:sharpPDF.Fonts.TTF.DirectoryTable">
            <summary>
            Directory Table
            </summary>
        </member>
        <member name="T:sharpPDF.Fonts.TTF.FontHeaderTable">
            <summary>
            Font Header Table (head)
            </summary>
        </member>
        <member name="T:sharpPDF.Fonts.TTF.HorizontalHeaderTable">
            <summary>
            Horizontal Header Table (hhea)
            </summary>
        </member>
        <member name="T:sharpPDF.Fonts.TTF.IO.AdvancedFileStream">
            <summary>
            Class thet represents an extension of FileStream that reads/stores TTF File Format
            (Big-Endian and TTF variables, Based on Microsoft TTF Specifications)
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedFileStream.#ctor(System.String,System.IO.FileMode)">
            <summary>
            Class's Constructor
            </summary>
            <param name="fileName">Name of the file</param>
            <param name="fileMode">File Mode</param>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedFileStream.readString(System.Int32)">
            <summary>
            Method that reads a string from the stream
            </summary>
            <param name="length">Lenght of the string</param>
            <returns>String</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedFileStream.readUnicodeString(System.Int32)">
            <summary>
            Method that reads an unicode string from the stream
            </summary>
            <param name="length">Length of the string</param>
            <returns>String</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedFileStream.readULong_BE">
            <summary>
            Method that reads an Unsigned Long Big-Endian from the stream
            </summary>
            <returns>Unsigned Long</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedFileStream.readShort_BE">
            <summary>
            Method that reads a Short Big-Endian
            </summary>
            <returns>Short</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedFileStream.readUShort_BE">
            <summary>
            Method that reads a Unsigned Short Big-Endian
            </summary>
            <returns>Unsigned Short</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedFileStream.readInt">
            <summary>
            Method that reads an Integer
            </summary>
            <returns>Integer</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedFileStream.readInt_BE">
            <summary>
            Method that reads an Integer Big-Endian
            </summary>
            <returns>Integer</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedFileStream.readByte">
            <summary>
            Method that read a Byte
            </summary>
            <returns>Byte</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedFileStream.readByteArray(System.Int32)">
            <summary>
            Method that read an array of Bytes
            </summary>
            <param name="length">Lenght of the array</param>
            <returns>Byte Array</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedFileStream.readByteArray_BE(System.Int32)">
            <summary>
            Method that read an array of Bytes Big-Endian
            </summary>
            <param name="length">Lenght of the array</param>
            <returns>Byte Array</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedFileStream.SetPosition(System.Int64)">
            <summary>
            Method that sets the position of the stream
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedFileStream.SkipBytes(System.Int64)">
            <summary>
            Method that skip a number of Bytes
            </summary>
            <param name="length">Bytes to skip</param>
        </member>
        <member name="T:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream">
            <summary>
            Class thet represents an extension of MemoryStream that writes/stores bytes in TTF File Format
            (Big-Endian and TTF variables, Based on Microsoft TTF Specifications)
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.#ctor">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.readString(System.Int32)">
            <summary>
            Method that reads a string
            </summary>
            <param name="length">Lengtf of the string</param>
            <returns>String</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.writeString(System.String)">
            <summary>
            Method that writes a string
            </summary>
            <param name="stringValue">String to write</param>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.readUnicodeString(System.Int32)">
            <summary>
            Method that read an Unicode String
            </summary>
            <param name="length">Length of the string</param>
            <returns>Unicode String</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.writeUnicodeString(System.String)">
            <summary>
            Method that writes a Unicode string
            </summary>
            <param name="stringValue">Unicode String to write</param>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.readULong_BE">
            <summary>
            Method that reads an Unsigned Long Big-Endian
            </summary>
            <returns>Unsigned Long</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.writeULong_BE(System.Int32)">
            <summary>
            Method that write an Unsigned Long Big-Endian
            </summary>
            <param name="intValue">Unsigned Long</param>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.readShort_BE">
            <summary>
            Method that reads a Short Big-Endian
            </summary>
            <returns>Short</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.writeShort_BE(System.Int16)">
            <summary>
            Method that writes a Short Big-Endian
            </summary>
            <param name="shortValue">Short</param>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.readUShort_BE">
            <summary>
            Method that reads an Unsigned Short Big-Endian
            </summary>
            <returns>Unsigned Short</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.writeUShort_BE(System.Int32)">
            <summary>
            Method that writes an Unsigned Short Big-Endian
            </summary>
            <param name="ushortValue">Unsigned Short</param>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.readInt">
            <summary>
            Method that reads an Integer
            </summary>
            <returns>Integer</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.writeInt(System.Int32)">
            <summary>
            Method that writes an Integer
            </summary>
            <param name="intValue">Integer</param>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.readInt_BE">
            <summary>
            Method that reads an Integer Big-Endian
            </summary>
            <returns>Integer</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.writeInt_BE(System.Int32)">
            <summary>
            Method that writes an Integer Big-Endian
            </summary>
            <param name="intValue">Integer</param>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.readByte">
            <summary>
            Method that read a Byte
            </summary>
            <returns>Byte</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.readByteArray(System.Int32)">
            <summary>
            Method that read an array of Bytes
            </summary>
            <param name="length">Lenght of the array</param>
            <returns>Byte Array</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.writeByteArray(System.Byte[])">
            <summary>
            Method that writes an array of bytes
            </summary>
            <param name="byteArrayValue">Byte Array</param>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.readByteArray_BE(System.Int32)">
            <summary>
            Method that read an array of Bytes Big-Endian
            </summary>
            <param name="length">Lenght of the array</param>
            <returns>Byte Array</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.writeByteArray_BE(System.Byte[])">
            <summary>
            Method that writes an array of bytes Big-Endia
            </summary>
            <param name="byteArrayValue">Byte Array</param>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.SetPosition(System.Int64)">
            <summary>
            Method that sets the position of the stream
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.IO.AdvancedMemoryStream.SkipBytes(System.Int64)">
            <summary>
            Method that skip a number of Bytes
            </summary>
            <param name="length">Bytes to skip</param>
        </member>
        <member name="T:sharpPDF.Fonts.TTF.OffsetTable">
            <summary>
            Offset Table
            </summary>
        </member>
        <member name="T:sharpPDF.Fonts.TTF.OSTable">
            <summary>
            OS/2 Table (os/2)
            </summary>
        </member>
        <member name="T:sharpPDF.Fonts.TTF.PostScriptTable">
            <summary>
            PostScript Table
            </summary>
        </member>
        <member name="T:sharpPDF.Fonts.TTF.ttfFontReader">
            <summary>
            Descrizione di riepilogo per ttfFontReader.
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontReader.#ctor(System.String)">
            <summary>
            Class's Constructor
            </summary>
            <param name="fontReference">Name of the font file</param>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontReader.Dispose">
            <summary>
            Method that Dispose the object
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontReader.readFontFile">
            <summary>
            Method that reads the informations from the font file
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontReader.getFontDefinition">
            <summary>
            Method that returns the definition of the font
            </summary>
            <returns>Font Definition object</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontReader.getFontStream">
            <summary>
            Method that returns the a stream of the font file
            </summary>
            <returns>Byte aray with the stream of the font file</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontReader.readOffsetTable">
            <summary>
            Method that reads the Offset Table
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontReader.readNamesTable">
            <summary>
            Method that reads the Names Table
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontReader.readDirectoryTable">
            <summary>
            Method that reads a Directory Table
            </summary>
            <returns>Structure that represents the Directory Table</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontReader.readFontHeaderTable">
            <summary>
            Method that reads the FontHeader Table
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontReader.readHorizontalHeaderTable">
            <summary>
            Method that reads the HorizontalHeader Table
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontReader.readOsTable">
            <summary>
            Method that reads the OS Table
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontReader.readPostScriptTable">
            <summary>
            Method that reads the PostScript Table
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontReader.readGlyphWidths">
            <summary>
            Method that reads the Glyph's Widths
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontReader.readCMAP">
            <summary>
            Method that reads the CMAP
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontReader.readFormat0">
            <summary>
            Method that read the TTF Format 0
            </summary>
            <returns>Hashtable with glyph's informations</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontReader.readFormat4">
            <summary>
            Method that read the TTF Format 4
            </summary>
            <returns>Hashtable with glyph's informations</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontReader.readFormat6">
            <summary>
            Method that read the TTF Format 6
            </summary>
            <returns>Hashtable with glyph's informations</returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontReader.getCMAP(System.Int32,System.Int32)">
            <summary>
            Method that returns the CMAP table
            </summary>
            <param name="platformID">ID of the platform</param>
            <param name="encodingID">ID of the encoding</param>
            <returns>CMAP object</returns>
        </member>
        <member name="T:sharpPDF.Fonts.TTF.ttfFontSubset">
            <summary>
            Class that creates a new TTF font file stream, based on a subset of chars
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontSubset.getFontFileStream">
            <summary>
            Method that returns a byte-stream of the True Type Font subset
            </summary>
            <returns></returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontSubset.CreateDirectoryTable">
            <summary>
            Methotd that creates the Directory Table
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontSubset.ReadDirectoryTable">
            <summary>
            Methdo that reads the Directory Table
            </summary>
            <returns></returns>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontSubset.ReadLocaTable">
            <summary>
            Method that reads the Loca Table
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontSubset.LocaOldTobytesLocaNew">
            <summary>
            Method that converts the Loca Table to bytes
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontSubset.CreateFontSubset">
            <summary>
            Method that creates the font subset
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontSubset.FlatGlyphs">
            <summary>
            Method that checks the Glyphs
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontSubset.CheckGlyphComp(System.Int32)">
            <summary>
            Method that checks a single Glyph's composition
            </summary>
            <param name="glyph">Glyph code</param>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontSubset.CreateGlyphTables">
            <summary>
            Method that creates the new Glyph Table
            </summary>
        </member>
        <member name="M:sharpPDF.Fonts.TTF.ttfFontSubset.CalculateChecksum(System.Byte[])">
            <summary>
            Method that calculates the checksum for the subset
            </summary>
            <param name="byteArray">byte array</param>
            <returns>Checksum</returns>
        </member>
        <member name="T:sharpPDF.pdfFont">
            <summary>
            A Class that implements a PDF font.
            </summary>
        </member>
        <member name="P:sharpPDF.pdfFont.fontStyle">
            <summary>
            Font's style
            </summary>
        </member>
        <member name="P:sharpPDF.pdfFont.objectID">
            <summary>
            Font's ID
            </summary>
        </member>
        <member name="M:sharpPDF.pdfFont.#ctor(sharpPDF.Enumerators.predefinedFont,System.Int32)">
            <summary>
            Class's constructor
            </summary>
            <param name="newFontStyle">Font's style</param>
            <param name="newFontNumber">Font's number in the PDF </param>
        </member>
        <member name="M:sharpPDF.pdfFont.getText">
            <summary>
            Method that returns the PDF codes to write the Font in the document
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="M:sharpPDF.pdfFont.getFontName(sharpPDF.Enumerators.predefinedFont)">
            <summary>
            Static Mehtod that returns the name of the font
            </summary>
            <param name="fontType">Font's Type</param>
            <returns>String that contains the name of the font</returns>
        </member>
        <member name="T:sharpPDF.IAbsoluteContainer">
            <summary>
            Interface that represents an Absolute Container of controls or elements.
            </summary>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.addImage(sharpPDF.Elements.pdfImageReference,System.Int32,System.Int32)">
            <summary>
            Method that adds an Image inside the Container
            </summary>
            <param name="imageReference">Image's reference</param>
            <param name="X">X position of the image</param>
            <param name="Y">Y position of the image</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.addImage(sharpPDF.Elements.pdfImageReference,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Method that adds an Image inside the Container
            </summary>
            <param name="imageReference">Image's reference</param>
            <param name="X">X position of the image</param>
            <param name="Y">Y position of the image</param>
            <param name="height">Height of the image</param>
            <param name="width">Width of the image</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.addText(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32)">
            <summary>
            Method that adds a Text to the Container
            </summary>
            <param name="newText">String of thext</param>
            <param name="X">X position of the text</param>
            <param name="Y">Y position of the text</param>
            <param name="fontReference">Font's reference Object</param>
            <param name="fontSize">Font's size</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.addText(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,sharpPDF.pdfColor)">
            <summary>
            Method that adds a Text to the Container
            </summary>
            <param name="newText">String of thext</param>
            <param name="X">X position of the text</param>
            <param name="Y">Y position of the text</param>
            <param name="fontReference">Font's reference Object</param>
            <param name="fontSize">Font's size</param>
            <param name="fontColor">Font's color</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.addParagraph(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32)">
            <summary>
            Method that adds a Paragraph to the Container
            </summary>
            <param name="newText">Paragraph's Text</param>
            <param name="x">X position of the paragraph</param>
            <param name="y">Y position of the paragraph</param>
            <param name="fontReference">Font's reference object</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of the lines of the paragraph</param>
            <param name="parWidth">Width of the paragraph</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.addParagraph(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedAlignment)">
            <summary>
            Method that adds a Paragraph to the Container
            </summary>
            <param name="newText">Paragraph's Text</param>
            <param name="x">X position of the paragraph</param>
            <param name="y">Y position of the paragraph</param>
            <param name="fontReference">Font's reference object</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of the lines of the paragraph</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="parAlign">Alignment of the paragraph</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.addParagraph(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor)">
            <summary>
            Method that adds a Paragraph to the Container
            </summary>
            <param name="newText">Paragraph's Text</param>
            <param name="x">X position of the paragraph</param>
            <param name="y">Y position of the paragraph</param>
            <param name="fontReference">Font's reference object</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of the lines of the paragraph</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="textColor">Color of the paragraph</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.addParagraph(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedAlignment)">
            <summary>
            Method that adds a Paragraph to the Container
            </summary>
            <param name="newText">Paragraph's Text</param>
            <param name="x">X position of the paragraph</param>
            <param name="y">Y position of the paragraph</param>
            <param name="fontReference">Font's reference object</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of the lines of the paragraph</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="parAlign">Align of the paragraph</param>
            <param name="textColor">Color of the paragraph</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.addParagraph(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Method that adds a paragraph to the Container with a check on its maximum height
            </summary>
            <param name="newText">Text of the paragraph</param>
            <param name="x">X position of the paragraph inside the container</param>
            <param name="y">Y position of the paragraph inside the container</param>
            <param name="fontReference">Font of the paragraph</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of paragraph's lines</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="parHeight">Maximum height of the paragraph</param>
            <returns>Text out of the paragraph's maximum height</returns>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.addParagraph(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor)">
            <summary>
            Method that adds a paragraph to the Container with a check on its maximum height
            </summary>
            <param name="newText">Text of the paragraph</param>
            <param name="x">X position of the paragraph inside the container</param>
            <param name="y">Y position of the paragraph inside the container</param>
            <param name="fontReference">Font of the paragraph</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of paragraph's lines</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="parHeight">Maximum height of the paragraph</param>
            <param name="textColor">Text's color</param>
            <returns>Text out of the paragraph's maximum height</returns>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.addParagraph(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedAlignment)">
            <summary>
            Method that adds a paragraph to the Container with a check on its maximum height
            </summary>
            <param name="newText">Text of the paragraph</param>
            <param name="x">X position of the paragraph inside the container</param>
            <param name="y">Y position of the paragraph inside the container</param>
            <param name="fontReference">Font of the paragraph</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of paragraph's lines</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="parHeight">Maximum height of the paragraph</param>
            <param name="parAlign">Align of the paragraph</param>
            <returns>Text out of the paragraph's maximum height</returns>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.addParagraph(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedAlignment)">
            <summary>
            Method that adds a paragraph to the Container with a check on its maximum height
            </summary>
            <param name="newText">Text of the paragraph</param>
            <param name="x">X position of the paragraph inside the container</param>
            <param name="y">Y position of the paragraph inside the container</param>
            <param name="fontReference">Font of the paragraph</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of paragraph's lines</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="parHeight">Maximum height of the paragraph</param>
            <param name="textColor">Text's color</param>
            <param name="parAlign">Align of the paragraph</param>
            <returns>Text out of the paragraph's maximum height</returns>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.drawLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Method that draws a line on the Container
            </summary>
            <param name="X">X position of the line inside the Container</param>
            <param name="Y">Y position of the line inside the Container</param>
            <param name="X1">X1 position of the line inside the Container</param>
            <param name="Y1">Y1 position of the line inside the Container</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.drawLine(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor)">
            <summary>
            Method that draws a line on the Container
            </summary>
            <param name="X">X position of the line inside the Container</param>
            <param name="Y">Y position of the line inside the Container</param>
            <param name="X1">X1 position of the line inside the Container</param>
            <param name="Y1">Y1 position of the line inside the Container</param>
            <param name="lineColor">Line's color</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.drawLine(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,System.Int32)">
            <summary>
            Method that draws a line on the Container
            </summary>
            <param name="X">X position of the line inside the Container</param>
            <param name="Y">Y position of the line inside the Container</param>
            <param name="X1">X1 position of the line inside the Container</param>
            <param name="Y1">Y1 position of the line inside the Container</param>
            <param name="lineColor">Line's color</param>
            <param name="lineWidth">Line's width</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.drawLine(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedLineStyle)">
            <summary>
            Method that draws a line on the Container
            </summary>
            <param name="X">X position of the line inside the Container</param>
            <param name="Y">Y position of the line inside the Container</param>
            <param name="X1">X1 position of the line inside the Container</param>
            <param name="Y1">Y1 position of the line inside the Container</param>
            <param name="lineStyle">Line's style</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.drawLine(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedLineStyle,System.Int32)">
            <summary>
            Method that draws a line on the Container
            </summary>
            <param name="X">X position of the line inside the Container</param>
            <param name="Y">Y position of the line inside the Container</param>
            <param name="X1">X1 position of the line inside the Container</param>
            <param name="Y1">Y1 position of the line inside the Container</param>
            <param name="lineStyle">Line's style</param>
            <param name="lineWidth">Line's width</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.drawLine(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedLineStyle,sharpPDF.pdfColor)">
            <summary>
            Method that draws a line on the Container
            </summary>
            <param name="X">X position of the line inside the Container</param>
            <param name="Y">Y position of the line inside the Container</param>
            <param name="X1">X1 position of the line inside the Container</param>
            <param name="Y1">Y1 position of the line inside the Container</param>
            <param name="lineColor">Line's color</param>
            <param name="lineStyle">Line's style</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.drawLine(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedLineStyle,sharpPDF.pdfColor,System.Int32)">
            <summary>
            Method that draws a line on the Container
            </summary>
            <param name="X">X position of the line inside the Container</param>
            <param name="Y">Y position of the line inside the Container</param>
            <param name="X1">X1 position of the line inside the Container</param>
            <param name="Y1">Y1 position of the line inside the Container</param>
            <param name="lineColor">Line's color</param>
            <param name="lineStyle">Line's style</param>
            <param name="lineWidth">Line's width</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.drawRectangle(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor)">
            <summary>
            Method that draws a rectangle on the Container
            </summary>
            <param name="X">X position of the rectangle inside the Container</param>
            <param name="Y">Y position of the rectangle inside the Container</param>
            <param name="X1">X1 position of the rectangle inside the Container</param>
            <param name="Y1">Y1 position of the rectangle inside the Container</param>
            <param name="strokeColor">Color of the rectangle's border</param>
            <param name="fillColor">Inner color of the rectangle</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.drawRectangle(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor,System.Int32)">
            <summary>
            Method that draws a rectangle on the Container
            </summary>
            <param name="X">X position of the rectangle inside the Container</param>
            <param name="Y">Y position of the rectangle inside the Container</param>
            <param name="X1">X1 position of the rectangle inside the Container</param>
            <param name="Y1">Y1 position of the rectangle inside the Container</param>
            <param name="strokeColor">Color of the rectangle's border</param>
            <param name="fillColor">Inner color of the rectangle</param>
            <param name="borderWidth">Width of the rectangle's border</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.drawRectangle(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedLineStyle)">
            <summary>
            Method that draws a rectangle on the Container
            </summary>
            <param name="X">X position of the rectangle inside the Container</param>
            <param name="Y">Y position of the rectangle inside the Container</param>
            <param name="X1">X1 position of the rectangle inside the Container</param>
            <param name="Y1">Y1 position of the rectangle inside the Container</param>
            <param name="strokeColor">Color of the rectangle's border</param>
            <param name="fillColor">Inner color of the rectangle</param>
            <param name="borderStyle">Style of the rectangle's border</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.drawRectangle(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor,System.Int32,sharpPDF.Enumerators.predefinedLineStyle)">
            <summary>
            Method that draws a rectangle on the Container
            </summary>
            <param name="X">X position of the rectangle inside the Container</param>
            <param name="Y">Y position of the rectangle inside the Container</param>
            <param name="X1">X1 position of the rectangle inside the Container</param>
            <param name="Y1">Y1 position of the rectangle inside the Container</param>
            <param name="strokeColor">Color of the rectangle's border</param>
            <param name="fillColor">Inner color of the rectangle</param>
            <param name="borderWidth">Width of the rectangle's border</param>
            <param name="borderStyle">Style of the rectangle's border</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.drawCircle(System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor)">
            <summary>
            Method that adds a circle to the Container
            </summary>
            <param name="X">X position of the circle inside the Container</param>
            <param name="Y">Y position of the circle inside the Container</param>
            <param name="ray">Ray of the circle</param>
            <param name="strokeColor">Color of the circle's border</param>
            <param name="fillColor">Inner color of the circle</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.drawCircle(System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor,System.Int32)">
            <summary>
            Method that adds a circle to the Container
            </summary>
            <param name="X">X position of the circle inside the Container</param>
            <param name="Y">Y position of the circle inside the Container</param>
            <param name="ray">Ray of the circle</param>
            <param name="strokeColor">Color of the circle's border</param>
            <param name="fillColor">Inner color of the circle</param>
            <param name="borderWidth">Width of the circle's border</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.drawCircle(System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedLineStyle)">
            <summary>
            Method that adds a circle to the Container
            </summary>
            <param name="X">X position of the circle inside the Container</param>
            <param name="Y">Y position of the circle inside the Container</param>
            <param name="ray">Ray of the circle</param>
            <param name="strokeColor">Color of the circle's border</param>
            <param name="fillColor">Inner color of the circle</param>
            <param name="borderStyle">Style of the circle's border</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.drawCircle(System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedLineStyle,System.Int32)">
            <summary>
            Method that adds a circle to the Container
            </summary>
            <param name="X">X position of the circle inside the Container</param>
            <param name="Y">Y position of the circle inside the Container</param>
            <param name="ray">Ray of the circle</param>
            <param name="strokeColor">Color of the circle's border</param>
            <param name="fillColor">Inner color of the circle</param>
            <param name="borderStyle">Style of the circle's border</param>
            <param name="borderWidth">Width of the circle's border</param>	
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.addAnnotation(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Method that adds an annotations to the Container
            </summary>
            <param name="newContent">Text of the annotation</param>
            <param name="newCoordX">X position of the annotation inside the Container</param>
            <param name="newCoordY">Y position of the annotation inside the Container</param>
            <param name="open">Value that teels if the annotation is opened as default</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.addAnnotation(System.String,System.Int32,System.Int32,System.Boolean,sharpPDF.pdfColor)">
            <summary>
            Method that adds an annotations to the Container
            </summary>
            <param name="newContent">Text of the annotation</param>
            <param name="newCoordX">X position of the annotation inside the Container</param>
            <param name="newCoordY">Y position of the annotation inside the Container</param>
            <param name="open">Value that teels if the annotation is opened as default</param>
            <param name="newColor">Color of the annotation</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.addAnnotation(System.String,System.Int32,System.Int32,System.Boolean,sharpPDF.Enumerators.predefinedAnnotationStyle)">
            <summary>
            Method that adds an annotations to the Container
            </summary>
            <param name="newContent">Text of the annotation</param>
            <param name="newCoordX">X position of the annotation inside the Container</param>
            <param name="newCoordY">Y position of the annotation inside the Container</param>
            <param name="open">Value that teels if the annotation is opened as default</param>
            <param name="newStyle">Style of the annotation</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.addAnnotation(System.String,System.Int32,System.Int32,System.Boolean,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedAnnotationStyle)">
            <summary>
            Method that adds an annotations to the Container
            </summary>
            <param name="newContent">Text of the annotation</param>
            <param name="newCoordX">X position of the annotation inside the Container</param>
            <param name="newCoordY">Y position of the annotation inside the Container</param>
            <param name="open">Value that teels if the annotation is opened as default</param>
            <param name="newColor">Color of the annotation</param>
            <param name="newStyle">Style of the annotation</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.addElement(sharpPDF.Elements.pdfElement)">
            <summary>
            Method that adds a generic element to the Container
            </summary>
            <param name="MyElement">pdfElement Object</param>
        </member>
        <member name="M:sharpPDF.IAbsoluteContainer.addControl(sharpPDF.PDFControls.pdfControl)">
            <summary>
            Method that adds a pdfControl to the Container
            </summary>
            <param name="MyControl">pdfControl Object</param>
        </member>
        <member name="T:sharpPDF.IRelativeContainer">
            <summary>
            Interface that represents a Relative Container some basics elements.
            </summary>
        </member>
        <member name="M:sharpPDF.IRelativeContainer.addImage(sharpPDF.Elements.pdfImageReference)">
            <summary>
            Method that adds an Image inside the Container
            </summary>
            <param name="imageReference">Image's reference</param>
        </member>
        <member name="M:sharpPDF.IRelativeContainer.addImage(sharpPDF.Elements.pdfImageReference,System.Int32,System.Int32)">
            <summary>
            Method that adds an Image inside the Container
            </summary>
            <param name="imageReference">Image's reference</param>
            <param name="height">Height of the image</param>
            <param name="width">Width of the image</param>
        </member>
        <member name="M:sharpPDF.IRelativeContainer.addText(System.String,sharpPDF.Fonts.pdfAbstractFont,System.Int32)">
            <summary>
            Method that adds a Text to the Container
            </summary>
            <param name="newText">String of thext</param>
            <param name="fontReference">Font's reference Object</param>
            <param name="fontSize">Font's size</param>
        </member>
        <member name="M:sharpPDF.IRelativeContainer.addText(System.String,sharpPDF.Fonts.pdfAbstractFont,System.Int32,sharpPDF.pdfColor)">
            <summary>
            Method that adds a Text to the Container
            </summary>
            <param name="newText">String of thext</param>
            <param name="fontReference">Font's reference Object</param>
            <param name="fontSize">Font's size</param>
            <param name="fontColor">Font's color</param>
        </member>
        <member name="M:sharpPDF.IRelativeContainer.addParagraph(System.String,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedAlignment)">
            <summary>
            Method that adds a Paragraph to the Container
            </summary>
            <param name="newText">Paragraph's Text</param>
            <param name="fontReference">Font's reference object</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of the lines of the paragraph</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="parAlign">Alignment of the paragraph</param>
        </member>
        <member name="M:sharpPDF.IRelativeContainer.addParagraph(System.String,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedAlignment)">
            <summary>
            Method that adds a Paragraph to the Container
            </summary>
            <param name="newText">Paragraph's Text</param>
            <param name="fontReference">Font's reference object</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of the lines of the paragraph</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="parAlign">Align of the paragraph</param>
            <param name="textColor">Color of the paragraph</param>
        </member>
        <member name="M:sharpPDF.IRelativeContainer.addParagraph(System.String,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedAlignment)">
            <summary>
            Method that adds a paragraph to the Container with a check on its maximum height
            </summary>
            <param name="newText">Text of the paragraph</param>
            <param name="fontReference">Font of the paragraph</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of paragraph's lines</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="parHeight">Maximum height of the paragraph</param>
            <param name="parAlign">Align of the paragraph</param>
            <returns>Text out of the paragraph's maximum height</returns>
        </member>
        <member name="M:sharpPDF.IRelativeContainer.addParagraph(System.String,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedAlignment)">
            <summary>
            Method that adds a paragraph to the Container with a check on its maximum height
            </summary>
            <param name="newText">Text of the paragraph</param>
            <param name="fontReference">Font of the paragraph</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of paragraph's lines</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="parHeight">Maximum height of the paragraph</param>
            <param name="textColor">Text's color</param>
            <param name="parAlign">Align of the paragraph</param>
            <returns>Text out of the paragraph's maximum height</returns>
        </member>
        <member name="T:sharpPDF.ISeparable">
            <summary>
            Interface for all separable objects.
            </summary>
        </member>
        <member name="M:sharpPDF.ISeparable.GetBasicElements">
            <summary>
            This Method returns the standard elements which the composite element is made of.
            </summary>
            <returns>Collection of basic elements</returns>
        </member>
        <member name="T:sharpPDF.IWritable">
            <summary>
            Generic interface for pdf's objects
            </summary>	
        </member>
        <member name="M:sharpPDF.IWritable.getText">
            <summary>
            Method that returns the PDF codes to write the object in the document
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="T:sharpPDF.pdfBasePage">
            <summary>
            Class that represents a base page of the pdf document
            </summary>
        </member>
        <member name="F:sharpPDF.pdfBasePage._elements">
            <summary>
            Elements of the Page
            </summary>
        </member>
        <member name="F:sharpPDF.pdfBasePage._containerDoc">
            <summary>
            Container Document
            </summary>
        </member>
        <member name="M:sharpPDF.pdfBasePage.addImage(sharpPDF.Elements.pdfImageReference,System.Int32,System.Int32)">
            <summary>
            Method that adds an image to the page object
            </summary>
            <param name="imageReference">Image's reference</param>
            <param name="X">X position of the image in the page</param>
            <param name="Y">Y position of the image in the page</param>		
        </member>
        <member name="M:sharpPDF.pdfBasePage.addImage(sharpPDF.Elements.pdfImageReference,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Method that adds an image to the page object
            </summary>
            <param name="imageReference">Image's reference</param>
            <param name="X">X position of the image in the page</param>
            <param name="Y">Y position of the image in the page</param>
            <param name="height">New height of the image</param>
            <param name="width">New width of the image</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.addText(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32)">
            <summary>
            Method that adds a text element to the page object
            </summary>
            <param name="newText">Text</param>
            <param name="X">X position of the text in the page</param>
            <param name="Y">Y position of the text in the page</param>
            <param name="fontReference">Font's reference into the PDF document</param>
            <param name="fontSize">Font's size</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.addText(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,sharpPDF.pdfColor)">
            <summary>
            Method that adds a text element to the page object
            </summary>
            <param name="newText">Text</param>
            <param name="X">X position of the text in the page</param>
            <param name="Y">Y position of the text in the page</param>
            <param name="fontReference">Font's reference into the PDF document</param>
            <param name="fontSize">Font's size</param>
            <param name="fontColor">Font's color</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.addParagraph(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32)">
            <summary>
            Method that adds a paragraph to the base page
            </summary>
            <param name="newText">Text of the paragraph</param>
            <param name="x">X position of the paragraph in the page</param>
            <param name="y">Y position of the paragraph in the page</param>
            <param name="fontReference">Font of the paragraph</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of paragrah's lines</param>
            <param name="parWidth">Width of the paragraph</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.addParagraph(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedAlignment)">
            <summary>
            Method that adds a paragraph to the base page
            </summary>
            <param name="newText">Text of the paragraph</param>
            <param name="x">X position of the paragraph in the page</param>
            <param name="y">Y position of the paragraph in the page</param>
            <param name="fontReference">Font of the paragraph</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of paragrah's lines</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="parAlign">Align of the paragraph</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.addParagraph(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor)">
            <summary>
            Method that adds a paragraph to the base page
            </summary>
            <param name="newText">Text of the paragraph</param>
            <param name="x">X position of the paragraph in the page</param>
            <param name="y">Y position of the paragraph in the page</param>
            <param name="fontReference">Font of the paragraph</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of paragrah's lines</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="textColor">Text's color</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.addParagraph(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedAlignment)">
            <summary>
            Method that adds a paragraph to the base page
            </summary>
            <param name="newText">Text of the paragraph</param>
            <param name="x">X position of the paragraph in the page</param>
            <param name="y">Y position of the paragraph in the page</param>
            <param name="fontReference">Font of the paragraph</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of paragrah's lines</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="textColor">Text's color</param>
            <param name="parAlign">Align of the paragraph</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.addParagraph(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Method that adds a paragraph to the base page with a check on its maximum height
            </summary>
            <param name="newText">Text of the paragraph</param>
            <param name="x">X position of the paragraph inside the page</param>
            <param name="y">Y position of the paragraph inside the page</param>
            <param name="fontReference">Font of the paragraph</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of paragraph's lines</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="parHeight">Maximum height of the paragraph</param>
            <returns>Text out of the paragraph's maximum height</returns>
        </member>
        <member name="M:sharpPDF.pdfBasePage.addParagraph(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor)">
            <summary>
            Method that adds a paragraph to the base page with a check on its maximum height
            </summary>
            <param name="newText">Text of the paragraph</param>
            <param name="x">X position of the paragraph inside the page</param>
            <param name="y">Y position of the paragraph inside the page</param>
            <param name="fontReference">Font of the paragraph</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of paragraph's lines</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="parHeight">Maximum height of the paragraph</param>
            <param name="textColor">Text's color</param>
            <returns>Text out of the paragraph's maximum height</returns>
        </member>
        <member name="M:sharpPDF.pdfBasePage.addParagraph(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedAlignment)">
            <summary>
            Method that adds a paragraph to the base page with a check on its maximum height
            </summary>
            <param name="newText">Text of the paragraph</param>
            <param name="x">X position of the paragraph inside the page</param>
            <param name="y">Y position of the paragraph inside the page</param>
            <param name="fontReference">Font of the paragraph</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of paragraph's lines</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="parHeight">Maximum height of the paragraph</param>
            <param name="parAlign">Align of the paragraph</param>
            <returns>Text out of the paragraph's maximum height</returns>
        </member>
        <member name="M:sharpPDF.pdfBasePage.addParagraph(System.String,System.Int32,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedAlignment)">
            <summary>
            Method that adds a paragraph to the base page with a check on its maximum height
            </summary>
            <param name="newText">Text of the paragraph</param>
            <param name="x">X position of the paragraph inside the page</param>
            <param name="y">Y position of the paragraph inside the page</param>
            <param name="fontReference">Font of the paragraph</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of paragraph's lines</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="parHeight">Maximum height of the paragraph</param>
            <param name="textColor">Text's color</param>
            <param name="parAlign">Align of the paragraph</param>
            <returns>Text out of the paragraph's maximum height</returns>
        </member>
        <member name="M:sharpPDF.pdfBasePage.drawLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Method that adds a line to the page object
            </summary>
            <param name="X">X position of the line in the page</param>
            <param name="Y">Y position of the line in the page</param>
            <param name="X1">X1 position of the line in the page</param>
            <param name="Y1">Y1 position of the line in the page</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.drawLine(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor)">
            <summary>
            Method that adds a line to the page object
            </summary>
            <param name="X">X position of the line in the page</param>
            <param name="Y">Y position of the line in the page</param>
            <param name="X1">X1 position of the line in the page</param>
            <param name="Y1">Y1 position of the line in the page</param>
            <param name="lineColor">Line's color</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.drawLine(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,System.Int32)">
            <summary>
            Method that adds a line to the page object
            </summary>
            <param name="X">X position of the line in the page</param>
            <param name="Y">Y position of the line in the page</param>
            <param name="X1">X1 position of the line in the page</param>
            <param name="Y1">Y1 position of the line in the page</param>
            <param name="lineColor">Line's color</param>
            <param name="lineWidth">Line's size</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.drawLine(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedLineStyle)">
            <summary>
            Method that adds a line to the page object
            </summary>
            <param name="X">X position of the line in the page</param>
            <param name="Y">Y position of the line in the page</param>
            <param name="X1">X1 position of the line in the page</param>
            <param name="Y1">Y1 position of the line in the page</param>
            <param name="lineStyle">Line's style</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.drawLine(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedLineStyle,System.Int32)">
            <summary>
            Method that adds a line to the page object
            </summary>
            <param name="X">X position of the line in the page</param>
            <param name="Y">Y position of the line in the page</param>
            <param name="X1">X1 position of the line in the page</param>
            <param name="Y1">Y1 position of the line in the page</param>
            <param name="lineStyle">Line's style</param>
            <param name="lineWidth">Line's size</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.drawLine(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedLineStyle,sharpPDF.pdfColor)">
            <summary>
            Method that adds a line to the page object
            </summary>
            <param name="X">X position of the line in the page</param>
            <param name="Y">Y position of the line in the page</param>
            <param name="X1">X1 position of the line in the page</param>
            <param name="Y1">Y1 position of the line in the page</param>
            <param name="lineStyle">Line's style</param>
            <param name="lineColor">Line's color</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.drawLine(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedLineStyle,sharpPDF.pdfColor,System.Int32)">
            <summary>
            Method that adds a line to the page object
            </summary>
            <param name="X">X position of the line in the page</param>
            <param name="Y">Y position of the line in the page</param>
            <param name="X1">X1 position of the line in the page</param>
            <param name="Y1">Y1 position of the line in the page</param>
            <param name="lineStyle">Line's style</param>
            <param name="lineColor">Line's color</param>
            <param name="lineWidth">Line's size</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.drawRectangle(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor)">
            <summary>
            Method that adds a rectangle to the page object
            </summary>
            <param name="X">X position of the rectangle in the page</param>
            <param name="Y">Y position of the rectangle in the page</param>
            <param name="X1">X1 position of the rectangle in the page</param>
            <param name="Y1">Y1 position of the rectangle in the page</param>
            <param name="strokeColor">Border's color</param>
            <param name="fillColor">Rectancle's color</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.drawRectangle(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor,System.Int32)">
            <summary>
            Method that adds a rectangle to the page object
            </summary>
            <param name="X">X position of the rectangle in the page</param>
            <param name="Y">Y position of the rectangle in the page</param>
            <param name="X1">X1 position of the rectangle in the page</param>
            <param name="Y1">Y1 position of the rectangle in the page</param>
            <param name="strokeColor">Border's color</param>
            <param name="fillColor">Rectancle's color</param>
            <param name="borderWidth">Border's size</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.drawRectangle(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedLineStyle)">
            <summary>
            Method that adds a rectangle to the page object
            </summary>
            <param name="X">X position of the rectangle in the page</param>
            <param name="Y">Y position of the rectangle in the page</param>
            <param name="X1">X1 position of the rectangle in the page</param>
            <param name="Y1">Y1 position of the rectangle in the page</param>
            <param name="strokeColor">Border's color</param>
            <param name="fillColor">Rectancle's color</param>
            <param name="borderStyle">Border's style</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.drawRectangle(System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor,System.Int32,sharpPDF.Enumerators.predefinedLineStyle)">
            <summary>
            Method that adds a rectangle to the page object
            </summary>
            <param name="X">X position of the rectangle in the page</param>
            <param name="Y">Y position of the rectangle in the page</param>
            <param name="X1">X1 position of the rectangle in the page</param>
            <param name="Y1">Y1 position of the rectangle in the page</param>
            <param name="strokeColor">Border's color</param>
            <param name="fillColor">Rectancle's color</param>
            <param name="borderWidth">Border's size</param>
            <param name="borderStyle">Border's style</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.drawCircle(System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor)">
            <summary>
            Method that adds a circle to the page object
            </summary>
            <param name="X">X position of the circle in the page</param>
            <param name="Y">Y position of the circle in the page</param>
            <param name="ray">Circle's ray</param>
            <param name="strokeColor">Border's color</param>
            <param name="fillColor">Circle's color</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.drawCircle(System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor,System.Int32)">
            <summary>
            Method that adds a circle to the page object
            </summary>
            <param name="X">X position of the circle in the page</param>
            <param name="Y">Y position of the circle in the page</param>
            <param name="ray">Circle's ray</param>
            <param name="strokeColor">Border's color</param>
            <param name="fillColor">Circle's color</param>
            <param name="borderWidth">Border's size</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.drawCircle(System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedLineStyle)">
            <summary>
            Method that adds a circle to the page object
            </summary>
            <param name="X">X position of the circle in the page</param>
            <param name="Y">Y position of the circle in the page</param>
            <param name="ray">Circle's ray</param>
            <param name="strokeColor">Border's color</param>
            <param name="fillColor">Circle's color</param>
            <param name="borderStyle">Border's style</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.drawCircle(System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedLineStyle,System.Int32)">
            <summary>
            Method that adds a circle to the page object
            </summary>
            <param name="X">X position of the circle in the page</param>
            <param name="Y">Y position of the circle in the page</param>
            <param name="ray">Circle's ray</param>
            <param name="strokeColor">Border's color</param>
            <param name="fillColor">Circle's color</param>
            <param name="borderStyle">Border's style</param>
            <param name="borderWidth">Border's size</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.addAnnotation(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Adds an annotation to the page object
            </summary>
            <param name="newContent">Content of the annotation element</param>
            <param name="newCoordX">X position on page</param>
            <param name="newCoordY">Y position on page</param>
            <param name="open">Sets the annotation to open or closed</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.addAnnotation(System.String,System.Int32,System.Int32,System.Boolean,sharpPDF.pdfColor)">
            <summary>
            Adds an annotation to the page object
            </summary>
            <param name="newContent">Content of the annotation element</param>
            <param name="newCoordX">X position on page</param>
            <param name="newCoordY">Y position on page</param>
            <param name="open">Sets the annotation to open or closed</param>
            <param name="newColor">The color of the annotation object</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.addAnnotation(System.String,System.Int32,System.Int32,System.Boolean,sharpPDF.Enumerators.predefinedAnnotationStyle)">
            <summary>
            Adds an annotation to the page object
            </summary>
            <param name="newContent">Content of the annotation element</param>
            <param name="newCoordX">X position on page</param>
            <param name="newCoordY">Y position on page</param>
            <param name="open">Sets the annotation to open or closed</param>
            <param name="newStyle">The style of the annotation element</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.addAnnotation(System.String,System.Int32,System.Int32,System.Boolean,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedAnnotationStyle)">
            <summary>
            Adds an annotation to the page object
            </summary>
            <param name="newContent">Content of the annotation element</param>
            <param name="newCoordX">X position on page</param>
            <param name="newCoordY">Y position on page</param>
            <param name="open">Sets the annotation to open or closed</param>
            <param name="newColor">The color of the annotation object</param>
            <param name="newStyle">The style of the annotation element</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.addControl(sharpPDF.PDFControls.pdfControl)">
            <summary>
            Method that adds a pdfControl into the page
            </summary>
            <param name="MyControl">PdfControl object</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.addElement(sharpPDF.Elements.pdfElement)">
            <summary>
            Method that adds a generic element into the page
            </summary>
            <param name="MyElement">PdfElement object</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.addTable(sharpPDF.Tables.pdfTable)">
            <summary>
            Method that adds a table to the page
            </summary>
            <param name="myTable">Table's object</param>
        </member>
        <member name="M:sharpPDF.pdfBasePage.addTable(sharpPDF.Tables.pdfTable,System.Int32)">
            <summary>
            Method that adds a table to the page, with a check on the maximum height
            </summary>
            <param name="myTable">Table's object</param>
            <param name="tabHeight">Maximum height of the table</param>
        </member>
        <member name="T:sharpPDF.pdfColor">
            <summary>
            A Class that implements a PDF color.
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.NoColor">
            <summary>
            No Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.Black">
            <summary>
            Black Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.White">
            <summary>
            White Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.Red">
            <summary>
            Red Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.LightRed">
            <summary>
            Light Red Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.DarkRed">
            <summary>
            Dark Red Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.Orange">
            <summary>
            Orange Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.LightOrange">
            <summary>
            Light Orange Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.DarkOrange">
            <summary>
            Dark Orange Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.Yellow">
            <summary>
            Yellow Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.LightYellow">
            <summary>
            Light Yellow Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.DarkYellow">
            <summary>
            Dark Yellow Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.Blue">
            <summary>
            Blue Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.LightBlue">
            <summary>
            Light Blue Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.DarkBlue">
            <summary>
            Dark Blue Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.Green">
            <summary>
            Green Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.LightGreen">
            <summary>
            Light Green Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.DarkGreen">
            <summary>
            Dark Green Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.Cyan">
            <summary>
            Cyan Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.LightCyan">
            <summary>
            Light Cyan Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.DarkCyan">
            <summary>
            Dark Cyan Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.Purple">
            <summary>
            Purple Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.LightPurple">
            <summary>
            Light Purple Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.DarkPurple">
            <summary>
            Dark Purple Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.Gray">
            <summary>
            Gray Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.LightGray">
            <summary>
            Light Gray Color
            </summary>
        </member>
        <member name="F:sharpPDF.pdfColor.DarkGray">
            <summary>
            Dark Gray Color
            </summary>
        </member>
        <member name="P:sharpPDF.pdfColor.rColor">
            <summary>
            R property of RGB color
            </summary>
        </member>
        <member name="P:sharpPDF.pdfColor.gColor">
            <summary>
            G property of RGB color
            </summary>
        </member>
        <member name="P:sharpPDF.pdfColor.bColor">
            <summary>
            B property of RGB color
            </summary>
        </member>
        <member name="M:sharpPDF.pdfColor.#ctor(System.String)">
            <summary>
            Class's constructor
            </summary>
            <param name="HEXColor">Hex Color</param>
        </member>
        <member name="M:sharpPDF.pdfColor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Class's constructor
            </summary>
            <param name="rColor">Red component of the color</param>
            <param name="gColor">Green component of the color</param>
            <param name="bColor">Blue component of the color</param>
        </member>
        <member name="M:sharpPDF.pdfColor.#ctor(System.String,System.String,System.String)">
            <summary>
            Internal constructor for the creation of the standard colors
            </summary>
            <param name="rColor">Red component of the color</param>
            <param name="gColor">Green component of the color</param>
            <param name="bColor">Blue component of the color</param>
        </member>
        <member name="M:sharpPDF.pdfColor.formatColorComponent(System.Int32)">
            <summary>
            Method that formats a int color value with the pdf color format
            </summary>
            <param name="colorValue">Component of the color</param>
            <returns>Formatted component of the color</returns>
        </member>
        <member name="M:sharpPDF.pdfColor.isColor">
            <summary>
            Method that validates the color
            </summary>
            <returns>Boolean value that represents the validity of the color</returns>
        </member>
        <member name="M:sharpPDF.pdfColor.Clone">
            <summary>
            Method that clones the pdfColorObject
            </summary>
            <returns>Cloned Object</returns>
        </member>
        <member name="T:sharpPDF.PDFControls.pdfControl">
            <summary>
            Base class for all PDF Controls.
            </summary>
        </member>
        <member name="F:sharpPDF.PDFControls.pdfControl._height">
            <summary>
            Height of the control
            </summary>
        </member>
        <member name="F:sharpPDF.PDFControls.pdfControl._width">
            <summary>
            Width of the control
            </summary>
        </member>
        <member name="P:sharpPDF.PDFControls.pdfControl.Height">
            <summary>
            Height of the control
            </summary>
        </member>
        <member name="P:sharpPDF.PDFControls.pdfControl.Width">
            <summary>
            Width of the control
            </summary>
        </member>
        <member name="F:sharpPDF.PDFControls.pdfControl._containerDocument">
            <summary>
            Control's Container
            </summary>
        </member>
        <member name="M:sharpPDF.PDFControls.pdfControl.#ctor(sharpPDF.pdfDocument)">
            <summary>
            Class's Constructor
            </summary>
            <param name="container">Container Document</param>
        </member>
        <member name="M:sharpPDF.PDFControls.pdfControl.GetBasicElements">
            <summary>
            Method that returns a collection of basics elements
            </summary>
            <returns>Collection of elements</returns>
        </member>
        <member name="T:sharpPDF.pdfDocument">
            <summary>
            A Class that implements a PDF document.
            </summary>
        </member>
        <member name="P:sharpPDF.pdfDocument.pageMarker">
            <summary>
            Document's page marker
            </summary>
        </member>
        <member name="P:sharpPDF.pdfDocument.persistentPage">
            <summary>
            Document's persistent page
            </summary>
        </member>
        <member name="P:sharpPDF.pdfDocument.Item(System.Int32)">
            <summary>
            Collection of pdf's page
            </summary>
        </member>
        <member name="M:sharpPDF.pdfDocument.#ctor(System.String,System.String)">
            <summary>
            Class's constructor
            </summary>
            <param name="author">Author of the document</param>
            <param name="title">Title of the document</param>
        </member>
        <member name="M:sharpPDF.pdfDocument.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Class's constructor
            </summary>
            <param name="author">Author of the document</param>
            <param name="title">Title of the document</param>
            <param name="openBookmark">Allow to show directly bookmarks near the document</param>
        </member>
        <member name="M:sharpPDF.pdfDocument.Dispose">
            <summary>
            Dispose Method
            </summary>
        </member>
        <member name="M:sharpPDF.pdfDocument.addTrueTypeFont(System.String,System.String)">
            <summary>
            Method thata adds a Font Reference of a True Type file inside the pdfDocument
            </summary>
            <param name="fileName">Name of the font's file</param>
            <param name="fontName">Font's reference name</param>
        </member>
        <member name="M:sharpPDF.pdfDocument.loadFont(System.String,sharpPDF.Fonts.pdfAbstractFont)">
            <summary>
            Method that loads a font inside the document
            </summary>
            <param name="fontName">Font's reference name</param>
            <param name="fontObject">pdfAbstractFont object</param>
        </member>
        <member name="M:sharpPDF.pdfDocument.isFontLoaded(System.String)">
            <summary>
            Methot that shows if a font is loaded inside the document
            </summary>
            <param name="fontName">Font's reference name</param>
            <returns>Booleand value that tells if the font is loaded</returns>
        </member>
        <member name="M:sharpPDF.pdfDocument.getFontReference(sharpPDF.Enumerators.predefinedFont)">
            <summary>
            Method that return the pdfAbstractFont Object Reference of a Standard Font
            </summary>
            <param name="fontType">Predefined Font</param>
            <returns>pdfAbstractFont Object</returns>
        </member>
        <member name="M:sharpPDF.pdfDocument.getFontReference(System.String)">
            <summary>
            Method that return the pdfAbstractFont Object Reference of a Font
            </summary>
            <param name="fontReference">Font's reference name</param>
            <returns>pdfAbstractFont Object</returns>
        </member>
        <member name="M:sharpPDF.pdfDocument.addImageReference(System.String,System.String)">
            <summary>
            Method that adds an Image Reference to the document
            </summary>
            <param name="fileName">Image File Name</param>
            <param name="imageName">Name of the reference</param>
        </member>
        <member name="M:sharpPDF.pdfDocument.addImageReference(System.Drawing.Image,System.String)">
            <summary>
            Method that adds an Image Reference to the document
            </summary>
            <param name="imageObject">Image Object</param>
            <param name="imageName">Name of the reference</param>
        </member>
        <member name="M:sharpPDF.pdfDocument.getImageReference(System.String)">
            <summary>
            Method that returns an pdfImageReference object
            </summary>
            <param name="imageName">Image's reference name</param>
            <returns>pdfImageReference Object</returns>
        </member>
        <member name="M:sharpPDF.pdfDocument.createPDF(System.IO.Stream)">
            <summary>
            Method that writes the PDF document on the stream
            </summary>
            <param name="outStream">Output stream</param>
        </member>
        <member name="M:sharpPDF.pdfDocument.createPDF(System.String)">
            <summary>
            Method that writes the PDF document on a file
            </summary>
            <param name="outputFile">String that represents the name of the output file</param>
        </member>
        <member name="M:sharpPDF.pdfDocument.initializeObjects">
            <summary>
            Private method for the initialization of all PDF objects
            </summary>
        </member>
        <member name="M:sharpPDF.pdfDocument.addPage">
            <summary>
            Method that creates a new page
            </summary>
            <returns>New PDF's page</returns>
        </member>
        <member name="M:sharpPDF.pdfDocument.addPage(sharpPDF.Enumerators.predefinedPageSize)">
            <summary>
            Method that creates a new page
            </summary>
            <param name="predefinedSize">The standard page's size</param>
            <returns>New PDF's page</returns>
        </member>
        <member name="M:sharpPDF.pdfDocument.addPage(System.Int32,System.Int32)">
            <summary>
            Method that creates a new page
            </summary>
            <returns>New PDF's page</returns>
            <param name="height">Height of the new page</param>
            <param name="width">Width of the new page</param>
        </member>
        <member name="M:sharpPDF.pdfDocument.addBookmark(sharpPDF.Bookmarks.pdfBookmarkNode)">
            <summary>
            Method that adds a bookmark to the document
            </summary>
            <param name="Bookmark">Bookmark object</param>
        </member>
        <member name="M:sharpPDF.pdfDocument.writeToBuffer(System.IO.BufferedStream,System.String)">
            <summary>
            Method that writes into the buffer a string
            </summary>
            <param name="myBuffer">Output Buffer</param>
            <param name="stringContent">String that contains the informations</param>
            <returns>The number of the bytes written in the Buffer</returns>
        </member>
        <member name="M:sharpPDF.pdfDocument.writeToBuffer(System.IO.BufferedStream,System.Byte[])">
            <summary>
            Method that writes into the buffer a string
            </summary>
            <param name="myBuffer">Output Buffer</param>
            <param name="byteContent">A Byte array that contains the informations</param>
            <returns>The number of the bytes written in the Buffer</returns>
        </member>
        <member name="T:sharpPDF.pdfHeader">
            <summary>
            A Class that implements a PDF header.
            </summary>
        </member>
        <member name="P:sharpPDF.pdfHeader.objectIDHeader">
            <summary>
            Header's ID
            </summary>
        </member>
        <member name="P:sharpPDF.pdfHeader.objectIDOutlines">
            <summary>
            Outlines's ID
            </summary>
        </member>
        <member name="P:sharpPDF.pdfHeader.objectIDInfo">
            <summary>
            Info's ID
            </summary>
        </member>
        <member name="P:sharpPDF.pdfHeader.pageTreeID">
            <summary>
            PageTree's ID
            </summary>
        </member>
        <member name="M:sharpPDF.pdfHeader.#ctor(System.Boolean)">
            <summary>
            Class's constructor
            </summary>
            <param name="openBookmark">Allows to show directly bookmarks near the document</param>
        </member>
        <member name="M:sharpPDF.pdfHeader.getText">
            <summary>
            Method that returns the PDF codes to write the Header in the document
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="T:sharpPDF.pdfInfo">
            <summary>
            A Class that implements a PDF info.
            </summary>
        </member>
        <member name="P:sharpPDF.pdfInfo.objectIDInfo">
            <summary>
            Info'sID
            </summary>
        </member>
        <member name="M:sharpPDF.pdfInfo.#ctor(System.String,System.String)">
            <summary>
            Class's constructor
            </summary>
            <param name="title">Document's title</param>
            <param name="author">Document's author</param>
        </member>
        <member name="M:sharpPDF.pdfInfo.getText">
            <summary>
            Method that returns the PDF codes to write the Info in the document
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="T:sharpPDF.pdfLineStyle">
            <summary>
            A Class that implements a PDF line style.
            </summary>
        </member>
        <member name="M:sharpPDF.pdfLineStyle.#ctor">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="M:sharpPDF.pdfLineStyle.#ctor(System.Int32)">
            <summary>
            Class's constructor
            </summary>
            <param name="newWidth">Line's size</param>
        </member>
        <member name="M:sharpPDF.pdfLineStyle.#ctor(sharpPDF.Enumerators.predefinedLineStyle)">
            <summary>
            Class's constructor
            </summary>
            <param name="newStyle">Line's style</param>
        </member>
        <member name="M:sharpPDF.pdfLineStyle.#ctor(System.Int32,sharpPDF.Enumerators.predefinedLineStyle)">
            <summary>
            Class's constructor
            </summary>
            <param name="newWidth">Line's size</param>
            <param name="newStyle">Line's style</param>
        </member>
        <member name="P:sharpPDF.pdfLineStyle.width">
            <summary>
            Line's size
            </summary>
        </member>
        <member name="P:sharpPDF.pdfLineStyle.lineStyle">
            <summary>
            Line's style
            </summary>
        </member>
        <member name="M:sharpPDF.pdfLineStyle.getText">
            <summary>
            Method that returns the PDF codes to write the line style in the document
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="T:sharpPDF.pdfOutlines">
            <summary>
            A Class that implements a PDF Outlines.
            </summary>
        </member>
        <member name="P:sharpPDF.pdfOutlines.objectIDOutlines">
            <summary>
            Outlines's ID
            </summary>
        </member>
        <member name="M:sharpPDF.pdfOutlines.#ctor">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="M:sharpPDF.pdfOutlines.initializeOutlines(System.Int32)">
            <summary>
            Method that initialize
            </summary>
            <param name="counterID">Initial Object ID</param>
            <returns>Updated Object ID</returns>
        </member>
        <member name="M:sharpPDF.pdfOutlines.addBookmark(sharpPDF.Bookmarks.pdfBookmarkNode)">
            <summary>
            Method that adds a bookmark to the outlines object
            </summary>
            <param name="Bookmark">BookmarkNode Object</param>
        </member>
        <member name="M:sharpPDF.pdfOutlines.initializeBookmarks(System.Int32,System.Collections.ArrayList,System.Int32)">
            <summary>
            Method that initialize all bookmarks
            </summary>
            <param name="CounterID">Initial Object ID</param>
            <param name="StartPoint">ArrayList of BookmarkNodes of the same level</param>
            <param name="FatherID">Object ID of the father</param>
            <returns>Number of childs</returns>
        </member>
        <member name="M:sharpPDF.pdfOutlines.getText">
            <summary>
            Method that returns the PDF codes to write the Outlines in the document
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="M:sharpPDF.pdfOutlines.getNodes(System.Collections.ArrayList)">
            <summary>
            Method that returns all nodes from a start collection
            </summary>
            <param name="StartPoint">ArrayList with the start point of pdfBookmarkNodes</param>
            <returns>Collection of all pdfBookmarkNodes from the start point</returns>
        </member>
        <member name="M:sharpPDF.pdfOutlines.getBookmarks">
            <summary>
            Method that returns a sorted(by objectID) collection of pdfBookmarkNodes
            </summary>
            <returns>Sorted bookmark collection</returns>
        </member>
        <member name="T:sharpPDF.pdfPage">
            <summary>
            A Class that implements a PDF page.
            </summary>
        </member>
        <member name="P:sharpPDF.pdfPage.objectID">
            <summary>
            Page's ID
            </summary>
        </member>
        <member name="P:sharpPDF.pdfPage.pageTreeID">
            <summary>
            PageTree's ID
            </summary>
        </member>
        <member name="P:sharpPDF.pdfPage.height">
            <summary>
            Page's height
            </summary>
        </member>
        <member name="P:sharpPDF.pdfPage.width">
            <summary>
            Page's width
            </summary>
        </member>
        <member name="M:sharpPDF.pdfPage.#ctor(sharpPDF.pdfDocument)">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="M:sharpPDF.pdfPage.#ctor(sharpPDF.Enumerators.predefinedPageSize,sharpPDF.pdfDocument)">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="M:sharpPDF.pdfPage.#ctor(System.Int32,System.Int32,sharpPDF.pdfDocument)">
            <summary>
            Class's constructor
            </summary>
            <param name="newHeight">Page's height</param>
            <param name="newWidth">Page's width</param>
            <param name="containerDoc">Container Document</param>
        </member>
        <member name="M:sharpPDF.pdfPage.Finalize">
            <summary>
            Class's distructor
            </summary>
        </member>
        <member name="M:sharpPDF.pdfPage.addFonts">
            <summary>
            Private method that returns the fonts object to the page object
            </summary>
            <returns>A string with fonts reference</returns>
        </member>
        <member name="M:sharpPDF.pdfPage.addImages">
            <summary>
            Private method that returns the images object to the page object
            </summary>
            <returns>A string with image reference</returns>
        </member>
        <member name="M:sharpPDF.pdfPage.getText">
            <summary>
            Method that returns the PDF codes to write the page in the document
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="T:sharpPDF.pdfPageMarker">
            <summary>
            Class that implements a pdf page marker
            </summary>
        </member>
        <member name="P:sharpPDF.pdfPageMarker.coordX">
            <summary>
            X position of the marker
            </summary>
        </member>
        <member name="P:sharpPDF.pdfPageMarker.coordY">
            <summary>
            Y position of the marker
            </summary>
        </member>
        <member name="P:sharpPDF.pdfPageMarker.fontType">
            <summary>
            Font's type
            </summary>
        </member>
        <member name="P:sharpPDF.pdfPageMarker.fontSize">
            <summary>
            Font's size
            </summary>
        </member>
        <member name="P:sharpPDF.pdfPageMarker.fontColor">
            <summary>
            Marker's color
            </summary>
        </member>
        <member name="P:sharpPDF.pdfPageMarker.pattern">
            <summary>
            Marker's pattern. In the pattern there are two simbols: #n# (that represents the
            actual page) and #N# (that represents the number of pages).
            The Default pattern is : "Page #n# Of #N#"
            </summary>
            <example>
            This example shows how to use the pattern property:
            <code>
            pdfPageMarker marker = new pdfPageMarker(400,30);
            marker.pattern = "Page #n#/#N#";
            myDoc.pageMarker = marker
            ......
            ......
            </code>
            The result on the document is : "Page 1/2"
            </example>
        </member>
        <member name="M:sharpPDF.pdfPageMarker.#ctor(System.Int32,System.Int32,sharpPDF.Enumerators.predefinedMarkerStyle,sharpPDF.Fonts.pdfAbstractFont,System.Int32)">
            <summary>
            Class's constructor
            </summary>
            <param name="coordX">X position in the PDF document</param>
            <param name="coordY">Y position in the PDF document</param>
            <param name="style">Marker's style</param>
            <param name="fontReference">Font's reference object</param>
            <param name="fontSize">Font's Size</param>
        </member>
        <member name="M:sharpPDF.pdfPageMarker.#ctor(System.Int32,System.Int32,sharpPDF.Enumerators.predefinedMarkerStyle,sharpPDF.Fonts.pdfAbstractFont,System.Int32,sharpPDF.pdfColor)">
            <summary>
            Class's constructor
            </summary>
            <param name="coordX">X position in the PDF document</param>
            <param name="coordY">Y position in the PDF document</param>
            <param name="style">Marker's style</param>
            <param name="fontReference">Font's reference object</param>
            /// <param name="fontSize">Font's Size</param>
            <param name="fontColor">Font's Color</param>		
        </member>
        <member name="M:sharpPDF.pdfPageMarker.#ctor(System.Int32,System.Int32,sharpPDF.Enumerators.predefinedMarkerStyle,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.String)">
            <summary>
            Class's constructor
            </summary>
            <param name="coordX">X position in the PDF document</param>
            <param name="coordY">Y position in the PDF document</param>
            <param name="style">Marker's style</param>
            <param name="fontReference">Font's reference object</param>
            <param name="fontSize">Font's Size</param>
            <param name="pattern">Page Marker's Pattern</param>
        </member>
        <member name="M:sharpPDF.pdfPageMarker.#ctor(System.Int32,System.Int32,sharpPDF.Enumerators.predefinedMarkerStyle,sharpPDF.Fonts.pdfAbstractFont,System.Int32,sharpPDF.pdfColor,System.String)">
            <summary>
            Class's constructor
            </summary>
            <param name="coordX">X position in the PDF document</param>
            <param name="coordY">Y position in the PDF document</param>
            <param name="style">Marker's style</param>
            <param name="fontReference">Font's reference object</param>
            <param name="fontSize">Font's Size</param>
            <param name="fontColor">Font's Color</param>
            <param name="pattern">Page Marker's Pattern</param>
        </member>
        <member name="M:sharpPDF.pdfPageMarker.getMarker(System.Int32,System.Int32)">
            <summary>
            Method that creates a string for the page's marker
            </summary>
            <param name="pgIndex">Actual page</param>
            <param name="pgNum">Number of pages</param>
            <returns>Text that represents page's marker</returns>
        </member>
        <member name="M:sharpPDF.pdfPageMarker.arabicToRoman(System.Int32)">
            <summary>
            Private method that converts arabic numbers into roman numbers
            </summary>
            <param name="arabic">Arabic number</param>
            <returns>Equivalent roman number</returns>
        </member>
        <member name="T:sharpPDF.pdfPageTree">
            <summary>
            A Class that implements a PDF pageTree.
            </summary>
        </member>
        <member name="P:sharpPDF.pdfPageTree.objectID">
            <summary>
            Pagetree's ID
            </summary>
        </member>
        <member name="M:sharpPDF.pdfPageTree.#ctor">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="M:sharpPDF.pdfPageTree.addPage(System.Int32)">
            <summary>
            Method that adds a page to the pageTree object
            </summary>
            <param name="pageID"></param>
        </member>
        <member name="M:sharpPDF.pdfPageTree.getText">
            <summary>
            Method that returns the PDF codes to write the pageTree in the document
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="T:sharpPDF.pdfPersistentPage">
            <summary>
            Class that represents a persistent page.
            All its objects are inherited by all document's pages.
            </summary>
        </member>
        <member name="M:sharpPDF.pdfPersistentPage.#ctor(sharpPDF.pdfDocument)">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="M:sharpPDF.pdfPersistentPage.Finalize">
            <summary>
            Class's distructor
            </summary>
        </member>
        <member name="T:sharpPDF.pdfPositionableObject">
            <summary>
            Generic pdf object placed at x,y coordinates
            </summary>
        </member>
        <member name="F:sharpPDF.pdfPositionableObject._coordX">
            <summary>
            The X coordinate of the object
            </summary>
        </member>
        <member name="F:sharpPDF.pdfPositionableObject._coordY">
            <summary>
            The Y coordinate of the object
            </summary>
        </member>
        <member name="P:sharpPDF.pdfPositionableObject.coordX">
            <summary>
            The X coordinate of the object
            </summary>
        </member>
        <member name="P:sharpPDF.pdfPositionableObject.coordY">
            <summary>
            The Y coordinate of the object
            </summary>
        </member>
        <member name="T:sharpPDF.pdfTrailer">
            <summary>
            A Class that implements a PDF trailer.
            </summary>
        </member>
        <member name="P:sharpPDF.pdfTrailer.xrefOffset">
            <summary>
            The offset of the XREF table
            </summary>
        </member>
        <member name="M:sharpPDF.pdfTrailer.#ctor(System.Int32)">
            <summary>
            Class's constructor
            </summary>
            <param name="lastObjectID">The ID of the last object in the document</param>
        </member>
        <member name="M:sharpPDF.pdfTrailer.Finalize">
            <summary>
            Class's destructor
            </summary>
        </member>
        <member name="M:sharpPDF.pdfTrailer.addObject(System.String)">
            <summary>
            Method that adds an object to the trailer object
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:sharpPDF.pdfTrailer.getText">
            <summary>
            Method that returns the PDF codes to write the trailer in the document
            </summary>
            <returns>String that contains PDF codes</returns>
        </member>
        <member name="T:sharpPDF.Tables.columnTableEventArgs">
            <summary>
            Arguments of a columnTableEventHandler
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.columnTableEventArgs._column">
            <summary>
            Column that generates the event
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.columnTableEventArgs.Column">
            <summary>
            Column that generates the event
            </summary>
        </member>
        <member name="M:sharpPDF.Tables.columnTableEventArgs.#ctor(sharpPDF.Tables.pdfTableColumn)">
            <summary>
            Class's constructor
            </summary>
            <param name="column">Column that generates the event</param>
        </member>
        <member name="T:sharpPDF.Tables.columnTableEventHandler">
            <summary>
            Delegate that represents a event generated when a column is added to the header or when it's changed
            </summary>
            <param name="sender">Object that generates the event</param>
            <param name="e">Arguments of the event</param>
        </member>
        <member name="T:sharpPDF.Tables.pdfTable">
            <summary>
            A Class that implements an abstract table object
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTable._containerDocument">
            <summary>
            Container document
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTable._tableHeader">
            <summary>
            Table's header
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTable._rowStyle">
            <summary>
            Table's row style
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTable._alternateRowStyle">
            <summary>
            Table's alternate row style
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTable._isAlternateStyle">
            <summary>
            Variable that sets the current row style
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTable._rows">
            <summary>
            Table's rows
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTable._borderSize">
            <summary>
            Table's border size
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTable._borderColor">
            <summary>
            Table's border color
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTable._cellpadding">
            <summary>
            Table's cellpadding
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTable.borderSize">
            <summary>
            Border's Size
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTable.borderColor">
            <summary>
            Border's color
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTable.tableHeader">
            <summary>
            Table's header
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTable.rowStyle">
            <summary>
            The style of a table's row
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTable.alternateRowStyle">
            <summary>
            The alternate style of a table's row
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTable.cellpadding">
            <summary>
            The cellpadding of the table
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTable.Item(System.Int32)">
            <summary>
            Table's rows
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTable.rowsCount">
            <summary>
            The number of rows
            </summary>
        </member>
        <member name="M:sharpPDF.Tables.pdfTable.#ctor(sharpPDF.pdfDocument)">
            <summary>
            Class's Constructor
            </summary>
            <param name="containerDocument">Container of the table</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTable.#ctor(sharpPDF.pdfDocument,System.Int32,sharpPDF.pdfColor)">
            <summary>
            Class's constructor
            </summary>
            <param name="containerDocument">Container of the table</param>
            <param name="border">Width of the border</param>
            <param name="borderColor">Color of the border</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTable.#ctor(sharpPDF.pdfDocument,System.Int32)">
            <summary>
            Class's constructor
            </summary>
            <param name="containerDocument">Container of the table</param>
            <param name="cellpadding">Cellpadding of the table</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTable.#ctor(sharpPDF.pdfDocument,System.Int32,sharpPDF.pdfColor,System.Int32)">
            <summary>
            Class's constructor
            </summary>
            <param name="containerDocument">Container of the table</param>
            <param name="border">Width of the border</param>
            <param name="borderColor">Color of the border</param>
            <param name="cellpadding">Cellpadding of the table</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTable.#ctor(sharpPDF.pdfDocument,System.Int32,sharpPDF.pdfColor,System.Int32,sharpPDF.Tables.pdfTableStyle)">
            <summary>
            Class's constructor
            </summary>
            <param name="containerDocument">Container of the table</param>
            <param name="border">Width of the border</param>
            <param name="borderColor">Color of the border</param>
            <param name="cellpadding">Cellpadding of the table</param>
            <param name="headerStyle">Style of the header</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTable.#ctor(sharpPDF.pdfDocument,System.Int32,sharpPDF.pdfColor,System.Int32,sharpPDF.Tables.pdfTableStyle,sharpPDF.Tables.pdfTableStyle)">
            <summary>
            Class's constructor
            </summary>
            <param name="containerDocument">Container of the table</param>
            <param name="border">Width of the border</param>
            <param name="borderColor">Color of the border</param>
            <param name="cellpadding">Cellpadding of the table</param>
            <param name="headerStyle">Style of the header</param>
            <param name="rowStyle">Style of the rows</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTable.#ctor(sharpPDF.pdfDocument,System.Int32,sharpPDF.pdfColor,System.Int32,sharpPDF.Tables.pdfTableStyle,sharpPDF.Tables.pdfTableStyle,sharpPDF.Tables.pdfTableStyle)">
            <summary>
            Class's constructor
            </summary>
            <param name="containerDocument">Container of the table</param>
            <param name="border">Width of the border</param>
            <param name="borderColor">Color of the border</param>
            <param name="cellpadding">Cellpadding of the table</param>
            <param name="headerStyle">Style of the header</param>
            <param name="rowStyle">Style of the rows</param>
            <param name="alternateRowStyle">Alternate style of the rows</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTable.createRow">
            <summary>
            Method that creates a new row
            </summary>
            <returns>A new pdfTableRowObject</returns>
        </member>
        <member name="M:sharpPDF.Tables.pdfTable.addRow(sharpPDF.Tables.pdfTableRow)">
            <summary>
            Method to add a new row into the table
            </summary>
            <param name="newRow">New row</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTable.GetEnumerator">
            <summary>
            Enumerator for table's rows
            </summary>
            <returns></returns>
        </member>
        <member name="M:sharpPDF.Tables.pdfTable.GetBasicElements">
            <summary>
            Method that returns the basic elements of the table
            </summary>
            <returns>Collection of basic elements</returns>
        </member>
        <member name="M:sharpPDF.Tables.pdfTable.CropTable(System.Int32)">
            <summary>
            Method that crop the table at the defined table's height
            </summary>
            <param name="tabHeight">Maximum height of the table</param>
            <returns>Table outside the maximum height</returns>
        </member>
        <member name="M:sharpPDF.Tables.pdfTable.columnAdded(System.Object,sharpPDF.Tables.columnTableEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:sharpPDF.Tables.pdfTableColumn">
            <summary>
            A Class that implements an abstract table's column object
            </summary>
        </member>
        <member name="E:sharpPDF.Tables.pdfTableColumn.ColumnChanged">
            <summary>
            Event generated when the content or the height of a column is changed
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableColumn._currentX">
            <summary>
            Current X position inside the column
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableColumn._currentY">
            <summary>
            Current Y position inside the column
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableColumn._columnWidth">
            <summary>
            Column's width
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableColumn._columnHeight">
            <summary>
            Column's height
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableColumn._columnAlign">
            <summary>
            Column's Alignment
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableColumn._columnVerticalAlign">
            <summary>
            Column's Vertical Alignment
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableColumn._columnStyle">
            <summary>
            Column's Style
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableColumn._content">
            <summary>
            Column's elements
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableColumn._containerRow">
            <summary>
            Container row
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableColumn._startX">
            <summary>
            Start X position of the column
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableColumn._startY">
            <summary>
            Start Y position of the column
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableColumn.columnWidth">
            <summary>
            Column's width
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableColumn.columnHeight">
            <summary>
            Column's height
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableColumn.columnAlign">
            <summary>
            Column's content align
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableColumn.columnVerticalAlign">
            <summary>
            Column's content vertical align
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableColumn.columnStyle">
            <summary>
            Column's style
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableColumn.containerRow">
            <summary>
            Container of the column
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableColumn.startX">
            <summary>
            Start X position of the column
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableColumn.startY">
            <summary>
            Start Y position of the column
            </summary>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableColumn.addText(System.String)">
            <summary>
            Method that adds a text to the column with the predefined column's style settings
            </summary>
            <param name="newText">Text to add</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableColumn.addParagraph(System.String,System.Int32,sharpPDF.Enumerators.predefinedAlignment)">
            <summary>
            Method that adds a paragraph to the column with the predefined column's style settings
            </summary>
            <param name="newText">Text to add</param>
            <param name="lineHeight">Height of a paragraph line</param>
            <param name="parAlign">Alignment of the paragraph. Remember that this is the alignment of the paragraph object and it "overloads" the column's alignment.</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableColumn.addParagraph(System.String,System.Int32,sharpPDF.Enumerators.predefinedAlignment,System.Int32)">
            <summary>
            Method that adds a paragraph to the column with the predefined column's style settings
            </summary>
            <param name="newText">Text to add</param>
            <param name="lineHeight">Height of a paragraph line</param>
            <param name="parAlign">Alignment of the paragraph. Remember that this is the alignment of the paragraph object and it "overloads" the column's alignment.</param>
            <param name="parHeight">Maximum height of the paragraph</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableColumn.addImage(sharpPDF.Elements.pdfImageReference)">
            <summary>
            Method that adds an image to the column
            </summary>
            <param name="imageReference">Image reference</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableColumn.addImage(sharpPDF.Elements.pdfImageReference,System.Int32,System.Int32)">
            <summary>
            Method that adds an image to the column
            </summary>
            <param name="imageReference">Image reference</param>
            <param name="height">New height of the image</param>
            <param name="width">New width of the image</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableColumn.addText(System.String,sharpPDF.Fonts.pdfAbstractFont,System.Int32)">
            <summary>
            Method that adds a text to the column
            </summary>
            <param name="newText">Text</param>
            <param name="fontReference">Font of the text</param>
            <param name="fontSize">Font's size</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableColumn.addText(System.String,sharpPDF.Fonts.pdfAbstractFont,System.Int32,sharpPDF.pdfColor)">
            <summary>
            Method that adds a text to the column
            </summary>
            <param name="newText">Text</param>
            <param name="fontReference">Font of the text</param>
            <param name="fontSize">Font's size</param>
            <param name="fontColor">Font's color</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableColumn.addParagraph(System.String,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedAlignment)">
            <summary>
            Method that adds a paragraph to the column
            </summary>
            <param name="newText">Text of the paragraph</param>
            <param name="fontReference">Text's font</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of paragraph's lines</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="parAlign">Alignment of the paragraph</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableColumn.addParagraph(System.String,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedAlignment)">
            <summary>
            Method that adds a paragraph to the column
            </summary>
            <param name="newText">Text of the paragraph</param>
            <param name="fontReference">Text's font</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of paragraph's lines</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="textColor">Font's color</param>
            <param name="parAlign">Alignment of the paragraph</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableColumn.addParagraph(System.String,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedAlignment)">
            <summary>
            Method that adds a paragraph to the column with a check on its maximum height
            </summary>
            <param name="newText">Text of the paragraph</param>
            <param name="fontReference">Paragraph's font</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of paragraph's lines</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="parHeight">Maximum height of the paragraph</param>
            <param name="parAlign">Paragraph's Alignment</param>
            <returns>Text out of the paragraph's maximum height</returns>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableColumn.addParagraph(System.String,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,System.Int32,sharpPDF.pdfColor,sharpPDF.Enumerators.predefinedAlignment)">
            <summary>
            Method that adds a paragraph to the column with a check on its maximum height
            </summary>
            <param name="newText">Text of the paragraph</param>
            <param name="fontReference">Paragraph's font</param>
            <param name="fontSize">Font's size</param>
            <param name="lineHeight">Height of paragraph's lines</param>
            <param name="parWidth">Width of the paragraph</param>
            <param name="parHeight">Maximum height of the paragraph</param>
            /// <param name="textColor">Text's color</param>
            <param name="parAlign">Paragraph's Alignment</param>
            <returns>Text out of the paragraph's maximum height</returns>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableColumn.insertBreak(System.Int32)">
            <summary>
            Method that adds a break inside the column
            </summary>
            <param name="brHeight">Height of the break</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableColumn.GetBasicElements">
            <summary>
            Method that returns the basic components of the pdfTableColumn
            </summary>
            <returns>Collection of pdfElements</returns>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableColumn.Clone">
            <summary>
            Method that clones the pdfTableColumn object
            </summary>
            <returns>Cloned Column</returns>
        </member>
        <member name="T:sharpPDF.Tables.pdfTableHeader">
            <summary>
            A Class that implements an abstract table's header object
            </summary>
        </member>
        <member name="E:sharpPDF.Tables.pdfTableHeader.ColumnAdded">
            <summary>
            Event generated when a column is added to the table's header
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableHeader._visible">
            <summary>
            Property that tells if the pdfTableHeader has to be showed
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableHeader.visible">
            <summary>
            Property that tells if the pdfTableHeader has to be showed
            </summary>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableHeader.#ctor(sharpPDF.Tables.pdfTable,sharpPDF.Tables.pdfTableStyle)">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableHeader.addColumn(System.Int32)">
            <summary>
            Method that adds a new column
            </summary>
            <param name="columnWidth">Width of the column</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableHeader.addColumn(System.Int32,sharpPDF.Enumerators.predefinedAlignment)">
            <summary>
            Method that adds a new column
            </summary>
            <param name="columnWidth">Width of the column</param>
            <param name="columnAlign">Alignment of the column</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableHeader.addColumn(System.Int32,sharpPDF.Enumerators.predefinedAlignment,sharpPDF.Enumerators.predefinedVerticalAlignment)">
            <summary>
            Method that adds a new column
            </summary>
            <param name="columnWidth">Width of the column</param>
            <param name="columnAlign">Alignment of the column</param>
            <param name="columnVerticalAlign">Vertical alignment of the column</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableHeader.Clone">
            <summary>
            Method that clones the pdfTableHeader Object
            </summary>
            <returns>Cloned Object</returns>
        </member>
        <member name="T:sharpPDF.Tables.pdfTableRow">
            <summary>
            A Class that implements an abstract table's row object
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableRow._cols">
            <summary>
            Columns of the row
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableRow._rowHeight">
            <summary>
            Height of the row
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableRow._rowWidth">
            <summary>
            Width of the row
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableRow._rowStyle">
            <summary>
            Style of the row
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableRow._containerTable">
            <summary>
            Container table
            </summary>		
        </member>
        <member name="F:sharpPDF.Tables.pdfTableRow._rowVerticalAlignment">
            <summary>
            Vertical alignment of the row
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableRow._startX">
            <summary>
            Start X position of the row
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableRow._startY">
            <summary>
            Start Y position of the row
            </summary>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableRow.#ctor(sharpPDF.Tables.pdfTable)">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableRow.#ctor(sharpPDF.Tables.pdfTableHeader)">
            <summary>
            Class's constructor
            </summary>
            <param name="tableHeader">Row Template based on Table's Header</param>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableRow.containerTable">
            <summary>
            Table that contains the row
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableRow.startX">
            <summary>
            Start X position of the row
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableRow.startY">
            <summary>
            Start Y position of the row
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableRow.Item(System.Int32)">
            <summary>
            Indexer of the pdfTableRow that represents its columns
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableRow.columnsCount">
            <summary>
            The number of columns
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableRow.rowHeight">
            <summary>
            Row's height
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableRow.rowWidth">
            <summary>
            Row's width
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableRow.rowStyle">
            <summary>
            Row's style
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableRow.rowVerticalAlign">
            <summary>
            Row's Vertical Alignment
            </summary>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableRow.GetEnumerator">
            <summary>
            Enumerator of the column's collection
            </summary>
            <returns>A IEnumerator of the indexed property</returns>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableRow.GetBasicElements">
            <summary>
            Method that returns the basic components of the pdfTableRom
            </summary>
            <returns>Collection of pdfElements</returns>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableRow.columnChanged(System.Object,sharpPDF.Tables.columnTableEventArgs)">
            <summary>
            Method that change the row's height after the changing of a column
            </summary>
            <param name="sender">Column that generates the event</param>
            <param name="e">Arguments of the event</param>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableRow.Clone">
            <summary>
            Method that clones the pdfTableRow object
            </summary>
            <returns>Cloned Row</returns>
        </member>
        <member name="T:sharpPDF.Tables.pdfTableStyle">
            <summary>
            Class that represents the style of a table's row
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableStyle._fontReference">
            <summary>
            Style's font
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableStyle._fontSize">
            <summary>
            Font's size
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableStyle._fontColor">
            <summary>
            Font's color
            </summary>
        </member>
        <member name="F:sharpPDF.Tables.pdfTableStyle._bgColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableStyle.fontReference">
            <summary>
            Type of the Font
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableStyle.fontSize">
            <summary>
            Size of the Font
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableStyle.fontColor">
            <summary>
            Color of the Font
            </summary>
        </member>
        <member name="P:sharpPDF.Tables.pdfTableStyle.bgColor">
            <summary>
            Color of the BackGround
            </summary>
        </member>
        <member name="M:sharpPDF.Tables.pdfTableStyle.#ctor(sharpPDF.Fonts.pdfAbstractFont,System.Int32,sharpPDF.pdfColor,sharpPDF.pdfColor)">
            <summary>
            Class's constructor
            </summary>
        </member>
        <member name="T:sharpPDF.textAdapter">
            <summary>
            Abstract class that implements different functions used for text and paragraph
            </summary>
        </member>
        <member name="M:sharpPDF.textAdapter.HEXFormatter(System.String)">
            <summary>
            Method that format a HEX string
            </summary>
            <param name="strText">input text string</param>
            <returns>HEX text string</returns>
        </member>
        <member name="M:sharpPDF.textAdapter.checkText(System.String)">
            <summary>
            Static method that checks special characters into a string
            </summary>
            <param name="strText">Input Text</param>
            <returns>Formatted Text</returns>
        </member>
        <member name="M:sharpPDF.textAdapter.formatParagraph(System.String@,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32)">
            <summary>
            Static method thats format a paragraph
            </summary>
            <param name="strText">Input Text</param>
            <param name="fontSize">Font's size</param>
            <param name="fontType">Font's type</param>
            <param name="parWidth">Paragrapfh's width</param>
            <param name="lineHeight">Line's height</param>
            <param name="maxLines">Maximum number of lines in a paragraph</param>
            <returns>IEnumerable interface that cointains paragraphLine objects</returns>
        </member>
        <member name="M:sharpPDF.textAdapter.formatParagraph(System.String@,System.Int32,sharpPDF.Fonts.pdfAbstractFont,System.Int32,System.Int32,System.Int32,sharpPDF.Enumerators.predefinedAlignment)">
            <summary>
            Static method thats format a paragraph
            </summary>
            <param name="strText">Input Text</param>
            <param name="fontSize">Font's size</param>
            <param name="fontType">Font's type</param>
            <param name="parWidth">Paragrapfh's width</param>
            <param name="lineHeight">Line's height</param>
            <param name="parAlign">Paragraph's Alignment</param>
            <param name="maxLines">Number of maximum lines of the paragraph</param>
            <returns>IEnumerable interface that cointains paragraphLine objects</returns>
        </member>
    </members>
</doc>
